[
  {
    "type" : "Characters",
    "content" : []
  },
  {
    "type" : "Scenes",
    "content" : []
  },
  {
    "type" : "Objects",
    "content" : []
  },
  {
    "type" : "Musics",
    "content" : []
  },
  {
    "type" : "Sounds",
    "content" : []
  },
  {
    "type" : "Variables",
    "content" : []
  },
  {
    "type" : "Pages",
    "content" : [
      {
      "title" : "Initial Page",
      "unkillable" : true,
      "listDialogues": []
      }
    ]
  },
  {
    "type" : "Engine",
    "content" : [
      {
        "title" : "game.html",
        "language" : "html",
        "icon" : "mdi-language-html5",
        "uneditable" : true,
        "value" : "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta id=\"metaTitle\" name=\"title\" content=\"Game Title\">\r\n    <meta id=\"metaDescription\" name=\"description\" content=\"Game description\">\r\n    <meta id=\"metaImage\" name=\"image\" property=\"og:image\"/>\r\n    <link id=\"faviconID\" rel=\"icon\" href=\"\">\r\n    <meta name=\"keywords\" content=\"Visual Novel, Video Game\">\r\n    <script src=\"https://unpkg.com/vue@next\"></script>\r\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/howler/2.2.1/howler.min.js\"></script>\r\n    <script src=\"libEngine.js\"> </script>\r\n    <script src=\"customFunction.js\"> </script>\r\n    <script src=\"engine_assets.js\"> </script>\r\n    <script type=\"text/javascript\" src=\"assets.json\"></script>\r\n    <link rel=\"stylesheet\" href=\"styleEngine.css\">\r\n\r\n    <script type=\"text/x-template\" id=\"modal-template\">\r\n        <transition name=\"modal-fade\">\r\n            <div class=\"modal-mask\">\r\n                <div class=\"modal-wrapper\">\r\n                    <div class=\"modal-container\">\r\n\r\n                        <div class=\"modal-header\">\r\n                            <h3 id=\"titleInventory\"> Inventory </h3>\r\n                        </div>\r\n\r\n                        <div class=\"modal-body\">\r\n                            <button v-for=\"(item, index) in inventory\" :key=\"index+item.name\" class=\"buttonClass buttonitem unselectable\" @click=\"$emit('clickitem', index)\">\r\n                                <img class=\"imgitem\" :src=\"'Assets/Objects/'+item.img\">\r\n                                <p class=\"textitem\"> {{ item.name }} {{ amountItemInventoryText(item) }}</p>\r\n                            </button>\r\n                        </div>\r\n\r\n                        <div class=\"modal-footer\">\r\n                            <button class=\"unselectable buttonClass buttonInventory inventorybutton modal-default-button\" @click=\"$emit('close')\">\r\n                                Return\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </transition>\r\n    </script>\r\n\r\n    <title id=\"titleGame\"> Game </title>\r\n</head>\r\n<body>\r\n<div id=\"app\">\r\n</div>\r\n</body>\r\n</html>\r\n\r\n\r\n<script>\r\n    const queryString = window.location.search;\r\n    const urlParams = new URLSearchParams(queryString);\r\n\r\n    const app = Vue.createApp({\r\n       template:\r\n           '<modal v-if=\"showModal\" :inventory=\"inventory\" @close=\"showModal = false\" @clickitem=\"clickiteminventory\"> </modal>' +\r\n           '<div id=\"characterDiv\" class=\"list-characters\" :style=\"{gridTemplateColumns : columnsCharacterDiv}\">' +\r\n           '  <div class=\"list-group-list-character\" v-for=\"(char,index) in listCharactersInScene\" :key=\"char.name+index\" :style=\"{gridColumn : char.gridColumn}\">\\n' +\r\n           '    <img class=\"imgcharacter unselectable\" :src=\"\\'Assets/Characters/\\'+char.img\" draggable=\"false\" @mousedown=\"() => {return false}\" @dragstart=\"() => {return false}\">' +\r\n           '  </div>\\n' +\r\n           '</div>' +\r\n           '<div id=\"bottom\">' +\r\n           '<div id=\"lineInput\">' +\r\n           '<transition name=\"fade\">\\n' +\r\n           '<div id=\"inputLoc\" v-if=\"askinput\">' +\r\n           '   <input :type=\"inputtype\" id=\"input\" v-model=\"input\" required> \\n' +\r\n           '   <button class=\"buttonClass\" id=\"buttoninput\" @click=\"submitInput\" :disabled=\"!canSubmit\" class=\"unselectable\"> Submit </button>' +\r\n           '</div>' +\r\n           '</transition>\\n' +\r\n           '</div>' +\r\n           '<div id=\"bloc-text\" @click=\"clickText()\">\\n' +\r\n           '        <p id=\"personnage\" class=\"unselectable\"> <strong> {{ currentCharacter }} </strong> </p>\\n' +\r\n           '        <p id=\"text\" class=\"unselectable\"> {{ currentText }} </p>\\n' +\r\n           '</div>\\n' +\r\n           '<transition name=\"fade\">\\n' +\r\n           '<div v-if=\"inChoices\">' +\r\n           '    <div id=\"choicesLoc\" :class=\"{grid2choices : currentChoicePageList.length <= 2, grid3choices : currentChoicePageList.length === 3, grid4choices : currentChoicePageList.length === 4, grid5choices : currentChoicePageList.length === 5, grid6choices : currentChoicePageList.length === 6, grid7choices : currentChoicePageList.length === 7, grid8choices : currentChoicePageList.length === 8}\">' +\r\n           '        <button v-for=\"(choice, index) in currentChoicePageList\" id=\"buttonchoice\" @click=\"clickChoice(choice.index)\" class=\"unselectable buttonClass choiceButton\" :style=\"{gridColumn: getColumnChoice(index), gridRow : getRowChoice(index)}\"> {{ choice.text }} </button>' +\r\n           '    </div>' +\r\n           '    <div id=\"pagesinventorypanel\">' +\r\n           '        <button v-if=\"!disableBackPageChoiceButtons\" id=\"leftpagebutton\" class=\"unselectable buttonClass buttonInventory\" @click=\"backPageChoice\"> &lt </button>' +\r\n           '        <button class=\"unselectable buttonClass buttonInventory inventorybutton\" @click=\"showInventory\">  Inventory </button>' +\r\n           '        <button v-if=\"!disableNextPageChoiceButtons\" id=\"rightpagebutton\" class=\"unselectable buttonClass buttonInventory\" @click=\"nextPageChoice\"> > </button>' +\r\n           '    </div>' +\r\n           '</div>' +\r\n           '</transition>\\n' +\r\n           '</div>',\r\n\r\n\r\n        mixins: [mix_engine],\r\n\r\n        data: () => ({\r\n            page : \"null\",\r\n            currentDialogueIndex : -1,\r\n            currentText : \"\",\r\n            currentCharacter : \"test\",\r\n            canPassDialogue : true,\r\n            animationText : null,\r\n            assets : assets,\r\n            allText : \"\",\r\n            askinput : false,\r\n            input : \"\",\r\n            inputtype : \"text\",\r\n            minInput : 0,\r\n            maxInput : 100,\r\n            inChoices : false,\r\n            listChoice : [],\r\n            inventory : [],\r\n            listObjectChoice : [],\r\n            currentChoicePage : 0,\r\n            showModal: false,\r\n            listCharactersInScene : [],\r\n            listMusics : [],\r\n            listSounds : [],\r\n            canGoNext : false,\r\n            textSoundID : 0,\r\n        }),\r\n\r\n        mounted() {\r\n            if(urlParams.get('page') !== null) this.page = urlParams.get('page');\r\n            if(urlParams.get('dialogue') !== null) this.currentDialogueIndex = parseInt(urlParams.get('dialogue'));\r\n            if(this.assets === null) return;\r\n\r\n            document.getElementById(\"titleGame\").innerHTML = this.assets[8].content.displayname;\r\n            document.getElementById(\"metaTitle\").setAttribute('content', this.assets[8].content.displayname);\r\n            document.getElementById(\"metaDescription\").setAttribute('content', this.assets[8].content.description);\r\n            if(this.assets[8].content.banner !== \"\") document.getElementById(\"metaImage\").setAttribute('content', this.assets[8].content.banner);\r\n            if(this.assets[8].content.icon !== \"\") document.getElementById(\"faviconID\").setAttribute('href', this.assets[8].content.icon);\r\n            this.playInitialDialogue();\r\n        },\r\n\r\n        computed:{\r\n            canSubmit(){\r\n                if(this.inputtype === \"text\"){\r\n                    return this.input !== \"\" && this.input.length >= this.minInput && this.input.length <= this.maxInput;\r\n                } else if (this.inputtype === \"number\"){\r\n                    try {\r\n                        let n = parseInt(this.input);\r\n                        return n>= this.minInput && n<= this.maxInput;\r\n                    } catch {\r\n                        return false;\r\n                    }\r\n                }\r\n                return false;\r\n           },\r\n            disableNextPageChoiceButtons(){\r\n               return this.listChoice.length <= this.currentChoicePage*8+8 ;\r\n            },\r\n            disableBackPageChoiceButtons(){\r\n                return this.currentChoicePage === 0;\r\n            },\r\n            currentChoicePageList(){\r\n                return this.listChoice.slice(this.currentChoicePage*8, Math.min(this.currentChoicePage*8+8, this.listChoice.length));\r\n            },\r\n            columnsCharacterDiv(){\r\n                if(this.listCharactersInScene.length<2) return 'repeat(3, minmax(0, 1fr))';\r\n                return 'repeat('+this.listCharactersInScene.length+', minmax(0, 1fr))';\r\n            }\r\n        },\r\n\r\n        methods:{\r\n           // #################### INITIAL LOADING\r\n            playInitialDialogue(){\r\n                if(this.page === \"null\" && this.currentDialogueIndex === -1) this.setInitialDialogue();\r\n\r\n               var dialogue = getDialogue(this.page, this.currentDialogueIndex, this.assets);\r\n               this.playDialogue(dialogue, this.currentDialogueIndex);\r\n            },\r\n            setInitialDialogue(){\r\n                this.assets[6].content.forEach((p) => {\r\n                    var i = 0;\r\n                    p.listDialogues.forEach((d) => {\r\n                    if(d.initial !== undefined && d.initial){\r\n                        this.page = p.title;\r\n                        this.currentDialogueIndex = i;\r\n                        return;\r\n                    }\r\n                    i++;\r\n                    });\r\n                });\r\n            },\r\n\r\n            // #################### DIALOGUES MANAGEMENT\r\n            playDialogue(dialogue, index){\r\n                this.canGoNext = (dialogue.waitEndScript === undefined ? true : !dialogue.waitEndScript);\r\n                this.canPassDialogue = !(dialogue.type === \"choices\" || dialogue.type === \"input\");\r\n                this.currentDialogueIndex = index;\r\n\r\n                if(dialogue.action !== undefined){\r\n                    let actions = JSON.parse(JSON.stringify(dialogue.action));\r\n                    if(actions.length > 0) {\r\n                        let callbackAction = () => {\r\n                            if(actions.length > 0) this.executeActionScript(actions.shift(),callbackAction);\r\n                            else{\r\n                                this.canGoNext = true;\r\n                                if(dialogue.type === \"function\") this.playNextDialogue(0);\r\n                            }\r\n                        };\r\n                        this.executeActionScript(actions.shift(),callbackAction);\r\n                    }\r\n                }\r\n\r\n                if(dialogue.type === \"function\" && this.canGoNext){\r\n                    this.playNextDialogue(0);\r\n                }\r\n\r\n                if(dialogue.tabs.includes(\"Dialogue\")){\r\n                    var character = getVariableValue(dialogue.speaker, this.assets);\r\n                    if(character === null || character === \"null\") character = dialogue.speakernull;\r\n                    this.showText(dialogue.text, character);\r\n                }\r\n\r\n                if(dialogue.type === \"choices\"){\r\n                    this.inChoices = true;\r\n                    this.listChoice = [];\r\n                    this.listObjectChoice = [];\r\n                    this.currentChoicePage = 0;\r\n\r\n                    var i = 0;\r\n                    let ref = this;\r\n                    dialogue.choices.forEach((c) => {\r\n                        if(c.type === \"choice\"){\r\n                            let value = getVariableValue(c.condition, ref.assets);\r\n                            if(value === null || value === \"null\") value = false;\r\n                            if(value){\r\n                                ref.listChoice.push({ text : c.text, index : i});\r\n                            }\r\n                        } else if(c.type === \"object\"){\r\n                            let value = getVariableValue(c.object, ref.assets);\r\n                            if(!(value === null || value === \"null\")) {\r\n                                ref.listObjectChoice.push({ object : value, index : i});\r\n                            }\r\n                        }\r\n                        i++;\r\n                    });\r\n                }\r\n\r\n                if(dialogue.type === \"input\"){\r\n                    this.askinput = true;\r\n                    this.input = \"\";\r\n                    if(dialogue.input !== undefined){\r\n                        if(dialogue.input.type.name === \"String\"){\r\n                            this.inputtype = \"text\";\r\n                        }\r\n                        if(dialogue.input.type.name === \"Integer\"){\r\n                            this.inputtype = \"number\";\r\n                        }\r\n                        this.minInput = dialogue.minInput;\r\n                        this.maxInput = dialogue.maxInput;\r\n                    }\r\n                }\r\n\r\n                if(dialogue.type === \"condition\"){\r\n                    var value = getVariableValue(dialogue.condition, this.assets);\r\n                    if(value === null || value === \"null\") value = false;\r\n                    if(value){\r\n                        this.playNextDialogue(1);\r\n                    } else {\r\n                        this.playNextDialogue(0);\r\n                    }\r\n                }\r\n\r\n                if(dialogue.type === \"transition\"){\r\n                    if(dialogue.transitionpage !== undefined && dialogue.transitionpage !== \"\"){\r\n                        var arrival = getTransitionDialogue(dialogue.transitionpage, dialogue.id, this.assets);\r\n                        if(arrival !== null){\r\n                            this.page = dialogue.transitionpage;\r\n                            this.playDialogue(arrival.d, arrival.index);\r\n                        }\r\n                    }\r\n                    if(dialogue.nextDialogue.length>0 && this.canGoNext){\r\n                        this.playNextDialogue(0);\r\n                    }\r\n                }\r\n\r\n            },\r\n            playNextDialogue(index, fromchoice = false){\r\n                var dialogue = getDialogue(this.page, this.currentDialogueIndex, this.assets);\r\n                if(dialogue.nextDialogue[index] !== undefined && dialogue.nextDialogue[index].id !== -1){\r\n                    if(fromchoice){\r\n                        this.inChoices = false;\r\n                        this.showModal = false;\r\n                    }\r\n                    this.playDialogue(getDialogue(this.page, dialogue.nextDialogue[index].id, this.assets), dialogue.nextDialogue[index].id);\r\n                }\r\n            },\r\n\r\n            // #################### TEXT MANAGEMENT\r\n            showText(text, character){\r\n               this.currentText = \"\";\r\n                this.allText = text;\r\n               let regex = /\\${((\\w|\\s)+)}/g;\r\n\r\n               const listMatch = [...text.matchAll(regex)];\r\n                listMatch.forEach((m) => {\r\n                    var value = getVariableValueByName(m[1], this.assets);\r\n                    if(value === \"null\" || value === null) this.allText = this.allText.replace(m[0], \"\");\r\n                    else this.allText = this.allText.replace(m[0], value);\r\n                });\r\n\r\n                this.currentCharacter = character;\r\n                var charList = this.allText.split(\"\");\r\n\r\n                let sound = getVariableValue(this.assets[8].content.defaultTextSound, this.assets);\r\n                if(sound !== \"null\" && sound !== null){\r\n                    let soundAsset = getSound(sound, this.assets);\r\n                    if(soundAsset !== null){\r\n                        this.textSoundID = this.playSound(soundAsset, sound, true);\r\n                    }\r\n                }\r\n\r\n               this.animationText = setInterval(() => {\r\n                   if(charList.length>0) this.currentText += charList.shift();\r\n                   else this.stopAnimationText();\r\n               }, 10)\r\n           },\r\n            stopAnimationText(){\r\n                this.removeEndSound(this.textSoundID);\r\n               clearInterval(this.animationText);\r\n               this.animationText = null;\r\n               this.currentText = this.allText;\r\n            },\r\n            clickText(){\r\n                let sound = getVariableValue(this.assets[8].content.defaultClickSound, this.assets);\r\n                if(sound !== \"null\" && sound !== null){\r\n                    let soundAsset = getSound(sound, this.assets);\r\n                    if(soundAsset !== null){\r\n                        this.playSound(soundAsset, sound);\r\n                    }\r\n                }\r\n               if(this.animationText === null) {\r\n                   if(this.canPassDialogue && this.canGoNext){\r\n                       this.playNextDialogue(0);\r\n                   }\r\n               } else {\r\n                   this.stopAnimationText();\r\n               }\r\n            },\r\n\r\n            // ##################### INPUT MANAGEMENT\r\n            submitInput() {\r\n                if(this.canSubmit){\r\n                    var dialogue = getDialogue(this.page, this.currentDialogueIndex, this.assets);\r\n                    let newvalue = this.input;\r\n                    if(this.inputtype === \"number\") newvalue = parseInt(newvalue);\r\n                    setValueVariableByName(dialogue.input.value.value, newvalue,  this.assets);\r\n                    this.askinput = false;\r\n                    this.playNextDialogue(0);\r\n                }\r\n            },\r\n\r\n            // #################### CHOICE & INVENTORY MANAGEMENT\r\n            clickChoice(index){\r\n                this.playNextDialogue(this.currentChoicePage*8 + index, true);\r\n            },\r\n            getColumnChoice(index){\r\n                if(this.currentChoicePageList.length < 4){\r\n                    if(this.currentChoicePageList.length === 1) return '1 / 3';\r\n                    return index+1;\r\n                } else if(this.currentChoicePageList.length === 4){\r\n                    return index%2 + 1;\r\n                } else if(this.currentChoicePageList.length === 5){\r\n                    switch(index){\r\n                        case 0:\r\n                            return '1 / 3';\r\n                        case 1:\r\n                            return '3 / 5';\r\n                        case 2:\r\n                            return '5 / 7';\r\n                        case 3:\r\n                            return '2 / 4';\r\n                        case 4:\r\n                            return '4 / 6';\r\n                    }\r\n                }else if(this.currentChoicePageList.length === 6){\r\n                    return index%3 + 1;\r\n                } else if(this.currentChoicePageList.length === 7){\r\n                    switch(index){\r\n                        case 0:\r\n                            return '1 / 3';\r\n                        case 1:\r\n                            return '3 / 5';\r\n                        case 2:\r\n                            return '5 / 7';\r\n                        case 3:\r\n                            return '7 / 9';\r\n                        case 4:\r\n                            return '2 / 4';\r\n                        case 5:\r\n                            return '4 / 6';\r\n                        case 6:\r\n                            return '6 / 8';\r\n                    }\r\n                }else if(this.currentChoicePageList.length === 8){\r\n                    return index%4 + 1;\r\n                }\r\n            },\r\n            getRowChoice(index){\r\n                if(this.currentChoicePageList.length < 4){\r\n                    return 1;\r\n                } else if(this.currentChoicePageList.length === 4){\r\n                    if(index<=1) return 1;\r\n                    return 2;\r\n                } else if(this.currentChoicePageList.length === 5){\r\n                    if(index<=2) return 1;\r\n                    return 2;\r\n                }else if(this.currentChoicePageList.length === 6){\r\n                    if(index<=2) return 1;\r\n                    return 2;\r\n                }else if(this.currentChoicePageList.length <=8 ){\r\n                    if(index<=3) return 1;\r\n                    return 2;\r\n                }\r\n            },\r\n            nextPageChoice(){\r\n                if(!(this.disableNextPageChoiceButtons)){\r\n                    this.currentChoicePage++;\r\n                }\r\n            },\r\n            backPageChoice(){\r\n                if(!(this.disableBackPageChoiceButtons)){\r\n                    this.currentChoicePage--;\r\n                }\r\n            },\r\n            showInventory(){\r\n              this.showModal = true;\r\n            },\r\n            clickiteminventory(index){\r\n                var list = this.listObjectChoice.filter((o) => o.object === this.inventory[index].name);\r\n                if(list.length > 0) {\r\n                    this.playNextDialogue(list[0].index, true);\r\n                }\r\n            },\r\n\r\n            // ################### CHARACTER MANGAMENT\r\n            resetCharactersLocation(){\r\n                if(this.listCharactersInScene.length === 1){\r\n                    this.listCharactersInScene[0].gridColumn = 2;\r\n                } else if(this.listCharactersInScene.length === 2){\r\n                    this.listCharactersInScene[0].gridColumn = 1;\r\n                    this.listCharactersInScene[1].gridColumn = 3;\r\n                } else {\r\n                    for(var i = 0; i<this.listCharactersInScene.length;i++){\r\n                        this.listCharactersInScene[i].gridColumn = i+1;\r\n                    }\r\n                }\r\n            },\r\n\r\n            // ################### SOUND MANAGEMENT\r\n            removeEndSound(id){\r\n                var index = this.listSounds.findIndex((s) => s.id === id);\r\n                if(index !== -1){\r\n                    this.listSounds[index].howl.stop();\r\n                    this.listSounds[index].howl = null;\r\n                    this.listSounds.splice(index, 1);\r\n                }\r\n            },\r\n            playSound(asset, name, loop = false){\r\n                var ref = this;\r\n                var id = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\r\n                this.listSounds.push({\r\n                    name : name,\r\n                    volume : asset.volume,\r\n                    id :id,\r\n                    howl : new Howl({\r\n                        src: [\"Assets/Sounds/\"+asset.path],\r\n                        autoplay: true,\r\n                        loop: loop,\r\n                        volume: asset.volume/100,\r\n                        onend: function() {\r\n                            if(!loop)ref.removeEndSound(id);\r\n                        }\r\n                    })\r\n                });\r\n                return id;\r\n            },\r\n\r\n            // ################### SCRIPT MANAGEMENT\r\n            executeActionScript(action, callback){\r\n                let execCallback = true;\r\n                if(action.code !== undefined && action.code !== \"\"){\r\n                    this[action.name](action.inputs);\r\n                }\r\n                switch(action.name){\r\n                    case \"Change Background\":\r\n                        let scene = getVariableValue(action.inputs[0], this.assets);\r\n                        if(scene === \"null\" || scene === null) break;\r\n                        let sceneObject = getScene(scene, this.assets);\r\n                        if(sceneObject === null) break;\r\n                        document.body.style.backgroundImage = \"url('Assets/Scenes/\"+ sceneObject.img +\"')\";\r\n                        break;\r\n                    case \"Give Object\":\r\n                        let object = getVariableValue(action.inputs[0], this.assets);\r\n                        if(object === \"null\" || object === null) break;\r\n                        let amount = getVariableValue(action.inputs[1], this.assets);\r\n                        if(amount === \"null\" || amount === null || amount === 0) break;\r\n                        let objectAsset = getObject(object, this.assets);\r\n                        if(objectAsset === null) break;\r\n                        let sameItemInventory = this.inventory.filter((i) => i.name === object);\r\n                        if(sameItemInventory.length>0){\r\n                            sameItemInventory[0].amount += amount;\r\n                        } else {\r\n                            this.inventory.push({name : object, amount : amount, img: objectAsset.img});\r\n                        }\r\n                        break;\r\n                    case \"Remove Object\":\r\n                        let objectToRemove = getVariableValue(action.inputs[0], this.assets);\r\n                        if(objectToRemove === \"null\" || objectToRemove === null) break;\r\n                        let amountToRemove = getVariableValue(action.inputs[1], this.assets);\r\n                        if(amountToRemove === \"null\" || amountToRemove === null || amountToRemove === 0) break;\r\n                        let index = this.inventory.findIndex((i) => i.name === objectToRemove);\r\n                        if(index !== -1){\r\n                             this.inventory[index].amount -= amountToRemove;\r\n                             if(this.inventory[index].amount <= 0){\r\n                                this.inventory.splice(index, 1);\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"If\":\r\n                        let condition = getVariableValue(action.inputs[0], this.assets);\r\n                        if(condition === \"null\" || condition === null || !condition || action.action === undefined) break;\r\n\r\n                        let actions = JSON.parse(JSON.stringify(action.action));\r\n                        if(actions.length>0){\r\n                            execCallback = false;\r\n                            let callbackAction = () => {\r\n                                if(actions.length > 0) this.executeActionScript(actions.shift(),callbackAction);\r\n                                else callback();\r\n                            };\r\n                            this.executeActionScript(actions.shift(),callbackAction);\r\n                        }\r\n                        break;\r\n                    case \"If Else\":\r\n                        let conditionIf = getVariableValue(action.inputs[0], this.assets);\r\n                        if(conditionIf === \"null\" || conditionIf === null) break;\r\n\r\n                        let actionsIfElse = [];\r\n                        let callbackActionIfElse = () => {\r\n                            if(actionsIfElse.length > 0) this.executeActionScript(actionsIfElse.shift(),callbackActionIfElse);\r\n                            else callback();\r\n                        };\r\n\r\n                        if(conditionIf){\r\n                            if(action.actionif === undefined) break;\r\n                            actionsIfElse = JSON.parse(JSON.stringify(action.actionif));\r\n                        } else {\r\n                            if(action.actionelse === undefined) break;\r\n                            actionsIfElse = JSON.parse(JSON.stringify(action.actionelse));\r\n                        }\r\n                        if(actionsIfElse.length>0){\r\n                            execCallback = false;\r\n                            this.executeActionScript(actionsIfElse.shift(),callbackActionIfElse);\r\n                        }\r\n                        break;\r\n                    case \"Delay\":\r\n                        let delay = getVariableValue(action.inputs[0], this.assets);\r\n                        if(delay === \"null\" || delay === null || delay === 0.0) break;\r\n                        execCallback = false;\r\n                        setTimeout(() => {callback();}, delay*1000);\r\n                        break;\r\n                    case \"Set\":\r\n                        let variable = getVariableValue(action.inputs[0], this.assets);\r\n                        if(variable === \"null\" || variable === null) break;\r\n                        let value = getVariableValue(action.inputs[1], this.assets);\r\n                        if(value === null) break;\r\n                        setValueVariableByName(variable, value, this.assets);\r\n                        break;\r\n                    case \"Set Random Integer\":\r\n                    case \"Set Random Float\":\r\n                        let variableRI = action.inputs[0].value.value\r\n                        if(variableRI === \"null\" || variableRI === null || variableRI === \"\") break;\r\n                        let minInt = getVariableValue(action.inputs[1], this.assets);\r\n                        if(minInt === \"null\" || minInt === null) break\r\n                        let maxInt = getVariableValue(action.inputs[2], this.assets);\r\n                        if(maxInt === \"null\" || maxInt === null) break\r\n                        let newRandomInt = Math.random() * (maxInt - minInt) + minInt;\r\n                        if(action.name === \"Set Random Integer\") newRandomInt = Math.floor(newRandomInt);\r\n                        setValueVariableByName(variableRI, newRandomInt, this.assets);\r\n                        break;\r\n                    case \"Add Character\":\r\n                        let character = getVariableValue(action.inputs[0], this.assets);\r\n                        if(character === \"null\" || character === null) break;\r\n                        let characterAsset = getCharacter(character, this.assets);\r\n                        if(characterAsset === null) break;\r\n                        if(this.listCharactersInScene.filter((c) => c.name === characterAsset.name).length === 0){\r\n                            this.listCharactersInScene.push({name : characterAsset.name, img : characterAsset.img, gridColumn:{}});\r\n                            this.resetCharactersLocation();\r\n                        }\r\n                        break;\r\n                    case \"Set Character State\":\r\n                        let characterS = getVariableValue(action.inputs[0], this.assets);\r\n                        if(characterS === \"null\" || characterS === null) break;\r\n                        let charList = this.listCharactersInScene.filter((c) => c.name === characterS);\r\n                        if(charList.length===0) return;\r\n                        let characterAssetS = getCharacter(characterS, this.assets);\r\n                        if(characterAssetS === null) break;\r\n                        let nameState = getVariableValue(action.inputs[1], this.assets);\r\n                        if(nameState === \"null\" || nameState === null || nameState === \"\") break;\r\n                        let listState = characterAssetS.imgOthers.filter((i) => i.name === nameState);\r\n                        if(listState.length>0){\r\n                            charList[0].img = listState[0].img;\r\n                        }\r\n                        break;\r\n                    case \"Remove Character\":\r\n                        let characterTR = getVariableValue(action.inputs[0], this.assets);\r\n                        if(characterTR === \"null\" || characterTR === null) break;\r\n                        let characterAssetTR = getCharacter(characterTR, this.assets);\r\n                        if(characterAssetTR === null) break;\r\n                        var indexTR = this.listCharactersInScene.findIndex((c) => c.name === characterAssetTR.name);\r\n                        if(indexTR !== -1){\r\n                            this.listCharactersInScene.splice(indexTR, 1);\r\n                            this.resetCharactersLocation();\r\n                        }\r\n                        break;\r\n                    case \"Play Music\":\r\n                        let music = getVariableValue(action.inputs[0], this.assets);\r\n                        if(music === \"null\" || music === null) break;\r\n                        let musicAsset = getMusic(music, this.assets);\r\n                        if(musicAsset === null) break;\r\n                        var indexM = this.listMusics.findIndex((m) => m.name === music);\r\n                        if(indexM === -1){\r\n                            this.listMusics.push(\r\n                                {\r\n                                    name : music,\r\n                                    volume : musicAsset.volume,\r\n                                    howl : new Howl({\r\n                                        src: [\"Assets/Musics/\"+musicAsset.path],\r\n                                        autoplay: true,\r\n                                        loop: true,\r\n                                        volume: musicAsset.volume/100})\r\n                                });\r\n                        } else {\r\n                            this.listMusics[indexM].howl.stop();\r\n                            this.listMusics[indexM].howl.play();\r\n                        }\r\n                        break;\r\n                    case \"Stop Music\":\r\n                        let musicTR = getVariableValue(action.inputs[0], this.assets);\r\n                        if(musicTR === \"null\" || musicTR === null) break;\r\n                        var indexMTR = this.listMusics.findIndex((m) => m.name === musicTR);\r\n                        if(indexMTR !== -1){\r\n                            this.listMusics[indexMTR].howl.stop();\r\n                            this.listMusics[indexMTR].howl = null;\r\n                            this.listMusics.splice(indexMTR, 1);\r\n                        }\r\n                        break;\r\n                    case \"Play Sound\":\r\n                        let sound = getVariableValue(action.inputs[0], this.assets);\r\n                        if(sound === \"null\" || sound === null) break;\r\n                        let soundAsset = getSound(sound, this.assets);\r\n                        if(soundAsset === null) break;\r\n                        this.playSound(soundAsset, sound);\r\n                        break;\r\n                    case \"Stop Sound\":\r\n                        let soundTR = getVariableValue(action.inputs[0], this.assets);\r\n                        if(soundTR === \"null\" || soundTR === null) break;\r\n                        this.listSounds.filter((s) => s.name === soundTR).forEach((s) => {\r\n                            s.howl.stop();\r\n                            s.howl = null;\r\n                        });\r\n                        this.listSounds = this.listSounds.filter((s) => s.name !== soundTR);\r\n                        break;\r\n                }\r\n                if(execCallback) callback();\r\n            },\r\n\r\n            getInputValue(input){\r\n                return getVariableValue(input, this.assets);\r\n            },\r\n        }\r\n    });\r\n\r\n    app.component(\"modal\", {\r\n        template: \"#modal-template\",\r\n        props:[\"inventory\"],\r\n        methods:{\r\n            amountItemInventoryText(item){\r\n                return  (item.amount > 1 ? 'x'+item.amount : '');\r\n            },\r\n        },\r\n    });\r\n\r\n    app.mount(\"#app\");\r\n\r\n</script>"
      },
      {
        "title" : "styleEngine.css",
        "language" : "css",
        "icon" : "mdi-language-css3",
        "uneditable" : true,
        "value" : ":root {\r\n  --btnchoicelight: #ff4242;\r\n  --btnchoicedark: #b82e2e;\r\n  --btninputlight: #92DE34;\r\n  --btninputdark: #69BC22;\r\n  --btninventorylight: #58a0e8;\r\n  --btninventorydark: #3b6ea1;\r\n  --btnchoicetext: #000000;\r\n  --backgroundcolor: #FFFFFF;\r\n}\r\n\r\nbody{\r\n    background-repeat: no-repeat;\r\n    background-size: auto 100vh;\r\n    background-position: top;\r\n    background-color: var(--backgroundcolor);\r\n    -webkit-transition: background-image 0.2s ease;\r\n    transition: background-image 0.2s ease;\r\n    overflow: hidden;\r\n}\r\n\r\n#bottom {\r\n    margin-bottom: 5px;\r\n    margin-right: 2%;\r\n    margin-left: 1%;\r\n    position: fixed;\r\n    bottom:0;\r\n    width:97%;\r\n}\r\n\r\n#bloc-text{\r\n    padding-top: 5px;\r\n    border-radius: 20px;\r\n    background-color: black;\r\n    opacity:0.75;\r\n    height: 20vh;\r\n    width:100%;\r\n}\r\n\r\n.unselectable {\r\n    -webkit-touch-callout: none;\r\n    -webkit-user-select: none;\r\n    -khtml-user-select: none;\r\n    -moz-user-select: none;\r\n    -ms-user-select: none;\r\n    user-select: none;\r\n}\r\n\r\n#personnage{\r\n    color:red;\r\n    text-indent: 75px;\r\n    font-size:22px;\r\n    margin-bottom:-16px;\r\n    margin-top: 2px;\r\n}\r\n\r\n#text {\r\n    text-indent: 30px;\r\n    margin-left: 20px;\r\n    margin-right: 20px;\r\n    color: white;\r\n    text-align: justify;\r\n    font-size:18px;\r\n}\r\n\r\n.fade-enter-active,\r\n.fade-leave-active {\r\n    transition: opacity 0.5s ease;\r\n}\r\n\r\n.fade-enter-from,\r\n.fade-leave-to {\r\n    opacity: 0;\r\n}\r\n\r\n#inputLoc{\r\n    grid-column: 2;\r\n    grid-row: 1;\r\n    display: grid;\r\n    grid-template-columns: repeat(4, 1fr);\r\n    grid-gap: 10px;\r\n}\r\n\r\n#lineInput{\r\n    display: grid;\r\n    grid-template-columns: repeat(3, 1fr);\r\n}\r\n\r\n#buttoninput{\r\n    grid-column: 4;\r\n    grid-row: 1;\r\n    height: 70%;\r\n    margin-top: 10%;\r\n    background-color: var(--btninputlight);\r\n    box-shadow: 0 0 0 7px var(--btninputlight) inset;\r\n    color: var(--btninputtext);\r\n}\r\n\r\n#buttoninput:hover {\r\n  background-image: linear-gradient(\r\n    145deg,\r\n    transparent 10%,\r\n    var(--btninputdark) 10% 20%,\r\n    transparent 20% 30%,\r\n    var(--btninputdark) 30% 40%,\r\n    transparent 40% 50%,\r\n    var(--btninputdark) 50% 60%,\r\n    transparent 60% 70%,\r\n    var(--btninputdark) 70% 80%,\r\n    transparent 80% 90%,\r\n    var(--btninputdark) 90% 100%\r\n  );\r\n  animation: background 3s linear infinite;\r\n}\r\n\r\n.buttonClass{\r\n    display: block;\r\n    cursor: pointer;\r\n    outline: none;\r\n    height: 35px;\r\n    border: none;\r\n    border-radius: 30px;\r\n    font-weight: 600;\r\n    background-size: 100% 100%;\r\n}\r\n\r\n.choiceButton{\r\n    background-color: var(--btnchoicelight);\r\n    box-shadow: 0 0 0 7px var(--btnchoicelight) inset;\r\n    color: var(--btnchoicetext);\r\n}\r\n\r\n.choiceButton:hover {\r\n  background-image: linear-gradient(\r\n    145deg,\r\n    transparent 10%,\r\n    var(--btnchoicedark) 10% 20%,\r\n    transparent 20% 30%,\r\n    var(--btnchoicedark) 30% 40%,\r\n    transparent 40% 50%,\r\n    var(--btnchoicedark) 50% 60%,\r\n    transparent 60% 70%,\r\n    var(--btnchoicedark) 70% 80%,\r\n    transparent 80% 90%,\r\n    var(--btnchoicedark) 90% 100%\r\n  );\r\n  animation: background 3s linear infinite;\r\n}\r\n\r\n@keyframes background {\r\n  0% {\r\n    background-position: 0 0;\r\n  }\r\n  100% {\r\n    background-position: 400px 0;\r\n  }\r\n}\r\n\r\n#input {\r\n    grid-column: 1/4;\r\n    grid-row: 1;\r\n    width: 100%;\r\n    padding: 12px 20px;\r\n    margin: 8px 0;\r\n    box-sizing: border-box;\r\n    outline: none;\r\n}\r\n\r\n#choicesLoc{\r\n    display: grid;\r\n    grid-gap: 10px;\r\n    margin: 20px 5%;\r\n}\r\n\r\n#grid2choices{\r\n    grid-template-columns: repeat(2, 1fr);\r\n}\r\n\r\n#grid3choices{\r\n    grid-template-columns: repeat(3, 1fr);\r\n}\r\n\r\n#grid4choices{\r\n    grid-template-columns: repeat(2, 1fr);\r\n    grid-template-rows: repeat(2, 1fr);\r\n}\r\n\r\n#grid5choices{\r\n    grid-template-columns: repeat(6, 1fr);\r\n    grid-template-rows: repeat(2, 1fr);\r\n}\r\n\r\n#grid6choices{\r\n    grid-template-columns: repeat(3, 1fr);\r\n    grid-template-rows: repeat(2, 1fr);\r\n}\r\n\r\n#grid7choices{\r\n    grid-template-columns: repeat(8, 1fr);\r\n    grid-template-rows: repeat(2, 1fr);\r\n}\r\n\r\n#grid8choices{\r\n    grid-template-columns: repeat(4, 1fr);\r\n    grid-template-rows: repeat(2, 1fr);\r\n}\r\n\r\n#pagesinventorypanel{\r\n    display: grid;\r\n    grid-gap: 10px;\r\n    grid-template-columns: repeat(10, 1fr);\r\n    margin: 20px 5%;\r\n}\r\n\r\n#leftpagebutton{\r\n    grid-column: 1;\r\n    grid-row: 1;\r\n    width: 100%;\r\n    background-color: var(--btninventorylight);\r\n    box-shadow: 0 0 0 7px var(--btninventorylight) inset;\r\n    color: var(--btnchoicetext);\r\n}\r\n\r\n#rightpagebutton{\r\n    grid-column: 10;\r\n    grid-row: 1;\r\n    width: 100%;\r\n    background-color: var(--btninventorylight);\r\n    box-shadow: 0 0 0 7px var(--btninventorylight) inset;\r\n    color: var(--btnchoicetext);\r\n}\r\n\r\n.inventorybutton{\r\n    grid-column: 2/10;\r\n    grid-row: 1;\r\n    width: 100%;\r\n    background-color: var(--btninventorylight);\r\n    box-shadow: 0 0 0 7px var(--btninventorylight) inset;\r\n    color: var(--btnchoicetext);\r\n}\r\n\r\n.buttonInventory:hover {\r\n  background-image: linear-gradient(\r\n    145deg,\r\n    transparent 10%,\r\n    var(--btninventorydark) 10% 20%,\r\n    transparent 20% 30%,\r\n    var(--btninventorydark) 30% 40%,\r\n    transparent 40% 50%,\r\n    var(--btninventorydark) 50% 60%,\r\n    transparent 60% 70%,\r\n    var(--btninventorydark) 70% 80%,\r\n    transparent 80% 90%,\r\n    var(--btninventorydark) 90% 100%\r\n  );\r\n  animation: background 3s linear infinite;\r\n}\r\n\r\n.modal-mask {\r\n    position: fixed;\r\n    z-index: 9998;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    background-color: rgba(0, 0, 0, 0.5);\r\n    display: table;\r\n}\r\n\r\n.modal-wrapper {\r\n    display: table-cell;\r\n    vertical-align: middle;\r\n}\r\n\r\n.modal-container {\r\n    position: relative;\r\n    width: 70%;\r\n    height: 70vh;\r\n    margin: 0px auto;\r\n    padding: 20px 30px;\r\n    background-color: #fff;\r\n    border-radius: 2px;\r\n    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.33);\r\n    font-family: Helvetica, Arial, sans-serif;\r\n}\r\n\r\n.modal-header h3 {\r\n    margin-top: 0;\r\n    color: #42b983;\r\n}\r\n\r\n.modal-body {\r\n    height: 85%;\r\n    overflow: auto;\r\n    display: grid;\r\n    grid-gap: 10px;\r\n    grid-template-columns: repeat(8, 1fr);\r\n    grid-auto-rows: 30%;\r\n}\r\n\r\n.modal-footer {\r\n    bottom: 0;\r\n    margin-bottom: 20px;\r\n    position: absolute;\r\n    margin-left: -50px;\r\n    width: 100%;\r\n}\r\n\r\n.modal-default-button {\r\n    float: right;\r\n    width: 20%;\r\n}\r\n\r\n.modal-fade-enter,\r\n.modal-fade-leave-to {\r\n    opacity: 0;\r\n}\r\n\r\n.modal-fade-enter-active,\r\n.modal-fade-leave-active {\r\n    transition: opacity .5s ease;\r\n}\r\n\r\n#titleInventory{\r\n    color : var(--btninventorydark);\r\n}\r\n\r\n.buttonitem{\r\n    height: 100%;\r\n    width: 100%;\r\n    display: grid;\r\n    grid-template-rows: repeat(5, 1fr);\r\n    background-color: var(--btninventorylight);\r\n    box-shadow: 0 0 0 7px var(--btninventorylight) inset;\r\n    color: var(--btnchoicetext);\r\n}\r\n\r\n.buttonitem:hover {\r\n  background-image: linear-gradient(\r\n    145deg,\r\n    transparent 10%,\r\n    var(--btninventorydark) 10% 20%,\r\n    transparent 20% 30%,\r\n    var(--btninventorydark) 30% 40%,\r\n    transparent 40% 50%,\r\n    var(--btninventorydark) 50% 60%,\r\n    transparent 60% 70%,\r\n    var(--btninventorydark) 70% 80%,\r\n    transparent 80% 90%,\r\n    var(--btninventorydark) 90% 100%\r\n  );\r\n  animation: background 3s linear infinite;\r\n}\r\n\r\n.imgitem{\r\n    width: 100%;\r\n    margin-top: 15%;\r\n    height: 90%;\r\n    grid-row: 1/5;\r\n    pointer-events: none;\r\n}\r\n\r\n.textitem{\r\n    grid-row: 5;\r\n    pointer-events: none;\r\n}\r\n\r\n#characterDiv {\r\n    width: 95%;\r\n    height: 100%;\r\n    position: fixed;\r\n    bottom: 0;\r\n    display: grid;\r\n    grid-gap: 1%;\r\n    justify-items: center;\r\n\r\n}\r\n\r\n.imgcharacter{\r\n    height: 100%;\r\n    pointer-events: none;\r\n    min-width: 0;\r\n    width: auto;\r\n    align-self: center;\r\n    justify-self: center;\r\n}"
      },
      {
        "title" : "libEngine.js",
        "language" : "javascript",
        "icon" : "mdi-language-javascript",
        "uneditable" : true,
        "value" : "function getDialogue(page, index, assets){\r\n    var pageA = assets[6].content.filter((p) => p.title === page);\r\n    if(pageA.length === 0) return null;\r\n    return pageA[0].listDialogues[index];\r\n}\r\n\r\nfunction getTransitionDialogue(page, id, assets){\r\n    var pageA = assets[6].content.filter((p) => p.title === page);\r\n    if(pageA.length === 0) return null;\r\n    for(var i = 0; i<pageA[0].listDialogues.length; i++){\r\n        if(pageA[0].listDialogues[i].id === id) return {d : pageA[0].listDialogues[i], index : i};\r\n    }\r\n    return null;\r\n}\r\n\r\nfunction getCharacter(name, assets){\r\n    return getAssetIndex(0, name, assets);\r\n}\r\n\r\nfunction getScene(name, assets){\r\n    return getAssetIndex(1, name, assets);\r\n}\r\n\r\nfunction getObject(name, assets){\r\n    return getAssetIndex(2, name, assets);\r\n}\r\n\r\nfunction getMusic(name, assets){\r\n    return getAssetIndex(3, name, assets);\r\n}\r\n\r\nfunction getSound(name, assets){\r\n    return getAssetIndex(4, name, assets);\r\n}\r\n\r\nfunction setValueVariableByName(name, value, assets){\r\n    var varA = assets[5].content.filter((p) => p.name === name);\r\n    if(varA.length === 0) return null;\r\n    var variable = varA[0];\r\n    variable.value = {value : value, type : \"value\"};\r\n}\r\n\r\nfunction getVariableValueByName(name, assets){\r\n    var varA = assets[5].content.filter((p) => p.name === name);\r\n    if(varA.length === 0) return null;\r\n    var variable = varA[0];\r\n    return getVariableValue(variable, assets);\r\n}\r\n\r\nfunction getVariableValue(variable, assets){\r\n    if(variable.value.type === \"value\" || variable.type.name === \"Variable\"){\r\n        if(variable.type.name === \"Boolean\" && (variable.value.operation !== undefined && variable.value.operation !== \"value\")){\r\n            switch (variable.value.operation) {\r\n                case \"==\":\r\n                    return getVariableValue(variable.value.input1, assets) === getVariableValue(variable.value.input2, assets);\r\n                case \">\":\r\n                    return getVariableValue(variable.value.input1, assets) > getVariableValue(variable.value.input2, assets);\r\n                case \">=\":\r\n                    return getVariableValue(variable.value.input1, assets) >= getVariableValue(variable.value.input2, assets);\r\n                case \"<\":\r\n                    return getVariableValue(variable.value.input1, assets) < getVariableValue(variable.value.input2, assets);\r\n                case \"<=\":\r\n                    return getVariableValue(variable.value.input1, assets) <= getVariableValue(variable.value.input2, assets);\r\n            }\r\n            return false;\r\n        } else if((variable.type.name === \"Integer\" || variable.type.name === \"Float\") && (variable.value.operation !== undefined && variable.value.operation !== \"value\")){\r\n            let input1 = (variable.type.name === \"Integer\" ? Math.trunc(getVariableValue(variable.value.input1, assets)) : getVariableValue(variable.value.input1, assets));\r\n            let input2 = (variable.type.name === \"Integer\" ? Math.trunc(getVariableValue(variable.value.input2, assets)) : getVariableValue(variable.value.input2, assets));\r\n            switch (variable.value.operation) {\r\n                case \"+\":\r\n                    return input1 + input2;\r\n                case \"-\":\r\n                    return input1 - input2;\r\n                case \"x\":\r\n                    return input1 * input2;\r\n                case \"÷\":\r\n                    return (variable.type.name === \"Integer\" ? Math.trunc(input1 / input2) : input1 / input2);\r\n            }\r\n            return false;\r\n        }\r\n        return variable.value.value;\r\n    }\r\n    if(variable.value.type === \"variable\"){\r\n        if(variable.type.name === \"Integer\") return Math.trunc(getVariableValueByName(variable.value.value, assets));\r\n        return getVariableValueByName(variable.value.value, assets);\r\n    }\r\n}\r\n\r\nfunction getAssetIndex(index, name, assets){\r\n    var asset = assets[index].content.filter((c) => c.name === name);\r\n    if(asset.length === 0) return null;\r\n    return asset[0];\r\n}"
      }
    ]
  },
  {
    "type" : "Properties",
    "content" : {}
  },
  {
    "type" : "Custom Functions",
    "content" : []
  }
]