[
  {
    "type" : "Characters",
    "content" : []
  },
  {
    "type" : "Scenes",
    "content" : []
  },
  {
    "type" : "Objects",
    "content" : []
  },
  {
    "type" : "Musics",
    "content" : []
  },
  {
    "type" : "Sounds",
    "content" : []
  },
  {
    "type" : "Variables",
    "content" : []
  },
  {
    "type" : "Pages",
    "content" : [
      {
      "title" : "Initial Page",
      "unkillable" : true,
      "listDialogues": []
      }
    ]
  },
  {
    "type" : "Engine",
    "content" : [
      {
        "title" : "game.html",
        "language" : "html",
        "icon" : "mdi-language-html5",
        "uneditable" : true,
        "value" : "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta id=\"metaTitle\" name=\"title\" content=\"Game Title\">\r\n    <meta id=\"metaDescription\" name=\"description\" content=\"Game description\">\r\n    <meta id=\"metaImage\" name=\"image\" property=\"og:image\"/>\r\n    <link id=\"faviconID\" rel=\"icon\" href=\"\">\r\n    <meta name=\"keywords\" content=\"Visual Novel, Video Game\">\r\n    <script src=\"Assets/Properties/vuejs.js\"></script>\r\n    <script src=\"Assets/Properties/howler.js\"></script>\r\n    <script src=\"libEngine.js\"> </script>\r\n    <script src=\"customFunction.js\"> </script>\r\n    <script src=\"engine_assets.js\"> </script>\r\n    <script type=\"text/javascript\" src=\"assets.json\"></script>\r\n    <link rel=\"stylesheet\" href=\"styleEngine.css\">\r\n    <title id=\"titleGame\"> Game </title>\r\n</head>\r\n<body>\r\n<div id=\"app\">\r\n</div>\r\n</body>\r\n</html>\r\n\r\n<script>\r\n    const queryString = window.location.search;\r\n    const urlParams = new URLSearchParams(queryString);\r\n    var packaged = false;\r\n\r\n    const app = Vue.createApp({\r\n        template:\r\n        // ################# CHARACTERS #################\r\n            '<div id=\"characters-module\" :style=\"{gridTemplateColumns : columnsCharacterDiv}\">' +\r\n            '  <div class=\"character-div\" v-for=\"(char,index) in listCharactersInScene\" :key=\"char.name+index\" :style=\"{gridColumn : char.gridColumn}\">\\n' +\r\n            '    <img class=\"character-img unselectable\" :style=\"{height : \\'calc(100% * \\'+char.size+\\')\\'}\" :src=\"\\'Assets/Characters/\\'+char.img\" draggable=\"false\" @mousedown=\"() => {return false}\" @dragstart=\"() => {return false}\">' +\r\n            '  </div>\\n' +\r\n            '</div>' +\r\n\r\n            // ################# INPUT DIALOGUE #################\r\n            '<div id=\"input-module\" :class=\"{show: askinput}\">' +\r\n            '        <div id=\"inputLoc\">' +\r\n            '            <input :type=\"inputtype\" id=\"inputText\" :class=\"{invalidtext : !canSubmit}\" v-model=\"input\" required> \\n' +\r\n            '            <button class=\"unselectable buttonClass\" id=\"inputButton\" @click=\"submitInput\" :disabled=\"!canSubmit\"> Submit </button>' +\r\n            '        </div>' +\r\n            '</div>' +\r\n\r\n            // ################# DIALOGUE BLOCK TEXT #################\r\n            '<div id=\"dialogue-module\" :class=\"{up: inChoices && !hideText, hide: hideText || showInventory}\">' +\r\n            '    <div v-if=\"currentCharacter !== \\'\\'\" id=\"speaker-block\">' +\r\n            '        <p id=\"character-speaker\" class=\"unselectable\"> <strong> {{ currentCharacter }} </strong> </p>\\n' +\r\n            '    </div>' +\r\n            '    <div ref=\"dialogueBlock\" id=\"dialogue-block\" @click=\"clickText()\"> ' +\r\n            '        <p id=\"dialogue-text\" class=\"unselectable\"> {{ currentText }} </p>\\n' +\r\n            '    </div>' +\r\n            '</div>' +\r\n\r\n            // ################# CHOICES MODULE #################\r\n            '<div id=\"choice-module\" :style=\"{pointerEvents: pointerEventsChoiceModule}\" :class=\"{hide: showInventory}\">' +\r\n            '    <div ref=\"choicePanel\" id=\"choice-block\" :class=\"{show: inChoices}\" :style=\"{transitionDelay: transitionDelayChoicesBlock}\"> ' +\r\n            '        <div id=\"choice-row\">' +\r\n            '            <button class=\"unselectable buttonClass pageButton\" :class=\"{hide: disableBackPageChoiceButtons}\" @click=\"backPageChoice\"> &lt </button>' +\r\n            '            <div id=\"choicesLoc\" :style=\"{paddingTop: paddingTopChoiceBlock}\" :class=\"{grid2choices : currentChoicePageList.length <= 2, grid3choices : currentChoicePageList.length === 3, grid4choices : currentChoicePageList.length === 4, grid5choices : currentChoicePageList.length === 5, grid6choices : currentChoicePageList.length === 6, grid7choices : currentChoicePageList.length === 7, grid8choices : currentChoicePageList.length === 8}\">' +\r\n            '                <button v-for=\"(choice, index) in currentChoicePageList\" @click=\"clickChoice(choice.index)\" class=\"unselectable buttonClass\" :style=\"{gridColumn: getColumnChoice(index), gridRow : getRowChoice(index)}\"> {{ choice.text }} </button>' +\r\n            '            </div>' +\r\n            '            <button class=\"unselectable buttonClass pageButton\" :class=\"{hide: disableNextPageChoiceButtons}\" @click=\"nextPageChoice\"> > </button>' +\r\n            '        </div>'+\r\n            '    </div>' +\r\n            '</div>' +\r\n\r\n            // ################# INVENTORY #################\r\n            '<button id=\"inventoryButton\" :class=\"{show: inChoices && !showInventory}\" class=\"unselectable buttonClass\" @click=\"showInventoryPanel\">  Inventory </button>' +\r\n\r\n            '<div id=\"inventory-background-overlay\" :class=\"{show : showInventory}\" @click=\"showInventory = false\"></div>' +\r\n            '<div id=\"inventory-module\" :class=\"{inventoryclosed : !showInventory}\">' +\r\n            '    <h1 class=\"unselectable\"> Inventory : </h1>' +\r\n            '    <div id=\"inventory-container\">' +\r\n            '        <button v-for=\"(item, index) in inventory\" :key=\"index+item.name\" class=\"buttonClass unselectable item-button\" @click=\"clickiteminventory(index)\">\\n' +\r\n            '            <img class=\"img-item\" :src=\"\\'Assets/Objects/\\'+item.img\">\\n' +\r\n            '            <p class=\"text-item\"> {{ item.name }} {{ amountItemInventoryText(item) }}</p>\\n' +\r\n            '        </button>' +\r\n            '    </div>' +\r\n            '    <button id=\"inventory-button-exit\" class=\"unselectable buttonClass\" @click=\"showInventory = false\">  Exit </button>' +\r\n            '</div>',\r\n\r\n        mixins: [mix_engine],\r\n\r\n        data: () => ({\r\n            hideText: false, // When true, the dialogue block/text is hidden\r\n            page : \"null\", // The page of nodes where we are currently playing in\r\n            currentDialogueIndex : -1, // Index of the current executed node in the current page\r\n            currentText : \"\", // The text currently displayed in the dialogue block\r\n            currentCharacter : \"test\", // The Character name currently displayed in the dialogue speaker block\r\n            canPassDialogue : true, // When true, the current dialogue is skippable (false with Input & Choice node for example)\r\n            animationText : null, // Store the interval in charge of the text animation (if null : no text animation is currently used)\r\n            assets : assets, // Store all the nodes, data, assets of the game.\r\n            allText : \"\", // All the text (that will be)/(which is) displayed of the current dialogue.\r\n            askinput : false, // When true, input UI will be displayed for asking input to the user\r\n            input : \"\", // The input text entered by the player\r\n            inputtype : \"text\", // Type of input asked to the player (text or number)\r\n            minInput : 0, // Minimum Number for number input , Minimum characters count for text input\r\n            maxInput : 100, // Maximum Number for number input , Maximum characters count for text input\r\n            inChoices : false, // When true, the choices ui is displayed\r\n            listChoice : [], // List of the choices that the player has currently\r\n            inventory : [], // List of all the items the player has in his/her inventory.\r\n            listObjectChoice : [], // List of inventory items that can be used as a choice in the current dialogue\r\n            currentChoicePage : 0, // The current page of choice (used when there are more than 8 choices)\r\n            showInventory: false, // When true, the inventory UI is displayed\r\n            listCharactersInScene : [], // The list of all characters that are currently in the scene\r\n            listMusics : [], // List of the musics that are currently played\r\n            listSounds : [],// List of the sounds that are currently played\r\n            canGoNext : false, // When true, the player can skip to the next dialogue (false when executing script that are not skippable for example)\r\n            textSoundID : 0, // ID of the text sound, use to get it / stop it\r\n            choicePanelRef: null, // Reference of choice panel DOM element\r\n            debugMode : false, // if true, when errors happend, it will show an alert dialog box\r\n        }),\r\n\r\n        mounted() {\r\n            // loading initial page and dialogue (useful when loading the game through a specific dialogue node)\r\n            if(urlParams.get('page') !== null) this.page = urlParams.get('page');\r\n            if(urlParams.get('dialogue') !== null) this.currentDialogueIndex = parseInt(urlParams.get('dialogue'));\r\n            if(this.assets === null) return;\r\n\r\n            // Setting the meta data\r\n            document.getElementById(\"titleGame\").innerHTML = this.assets[8].content.displayname;\r\n            document.getElementById(\"metaTitle\").setAttribute('content', this.assets[8].content.displayname);\r\n            document.getElementById(\"metaDescription\").setAttribute('content', this.assets[8].content.description);\r\n            if(this.assets[8].content.banner !== \"\") document.getElementById(\"metaImage\").setAttribute('content', this.assets[8].content.banner);\r\n            if(this.assets[8].content.icon !== \"\") document.getElementById(\"faviconID\").setAttribute('href', this.assets[8].content.icon);\r\n\r\n            // Starting the game\r\n            this.playInitialDialogue();\r\n            this.choicePanelRef = this.$refs.choicePanel;\r\n        },\r\n\r\n        computed:{\r\n            // Inidicate if the user can submit his/her input. (if the input il valid)\r\n            canSubmit(){\r\n                if(this.inputtype === \"text\"){\r\n                    return this.input !== \"\" && this.input.length >= this.minInput && this.input.length <= this.maxInput;\r\n                } else if (this.inputtype === \"number\"){\r\n                    try {\r\n                        let n = parseInt(this.input);\r\n                        return n>= this.minInput && n<= this.maxInput;\r\n                    } catch {\r\n                        return false;\r\n                    }\r\n                }\r\n                return false;\r\n            },\r\n            // When true, next page button for choices is disabled\r\n            disableNextPageChoiceButtons(){\r\n                return this.listChoice.length <= this.currentChoicePage*8+8;\r\n            },\r\n            // When true, previous page button for choices is disabled\r\n            disableBackPageChoiceButtons(){\r\n                return this.currentChoicePage === 0;\r\n            },\r\n            // return the page number of choices\r\n            currentChoicePageList(){\r\n                return this.listChoice.slice(this.currentChoicePage*8, Math.min(this.currentChoicePage*8+8, this.listChoice.length));\r\n            },\r\n            // return the css column numbers depending of the number of characters in the scene\r\n            columnsCharacterDiv(){\r\n                return (this.listCharactersInScene.length<2 ? 'repeat(3, 33%)' : 'repeat('+this.listCharactersInScene.length+','+parseInt(100 / this.listCharactersInScene.length)+'%)');\r\n            },\r\n            // return the css pointer event value for choice module\r\n            pointerEventsChoiceModule(){\r\n                return (this.inChoices ? \"all\" : \"none\");\r\n            },\r\n            // return the css transition delay value for choice module\r\n            transitionDelayChoicesBlock(){\r\n                return (this.inChoices ? \"0.2s\" : \"0s\");\r\n            },\r\n            // return the css padding top value for choice module\r\n            paddingTopChoiceBlock(){\r\n                return (this.currentChoicePageList.length === 3 ? \"0\" : \"2%\");\r\n            },\r\n        },\r\n\r\n        methods:{\r\n            // ######################### INITIAL LOADING ###############################\r\n            playInitialDialogue(){\r\n                if(this.page === \"null\" && this.currentDialogueIndex === -1) this.setInitialDialogue();\r\n\r\n                const dialogue = getDialogue(this.page, this.currentDialogueIndex, this.assets);\r\n                this.playDialogue(dialogue, this.currentDialogueIndex);\r\n            },\r\n            setInitialDialogue(){\r\n                this.assets[6].content.forEach((p) => {\r\n                    let i = 0;\r\n                    p.listDialogues.forEach((d) => {\r\n                        if(d.initial !== undefined && d.initial){\r\n                            this.page = p.title;\r\n                            this.currentDialogueIndex = i;\r\n                            return;\r\n                        }\r\n                        i++;\r\n                    });\r\n                });\r\n            },\r\n\r\n            // ######################### DIALOGUES MANAGEMENT #########################\r\n            playDialogue(dialogue, index){\r\n                this.canGoNext = (dialogue.waitEndScript === undefined ? true : !dialogue.waitEndScript);\r\n                this.canPassDialogue = !(dialogue.type === \"choices\" || dialogue.type === \"input\");\r\n                this.currentDialogueIndex = index;\r\n\r\n                if(dialogue.action !== undefined){\r\n                    let actions = JSON.parse(JSON.stringify(dialogue.action));\r\n                    if(actions.length > 0) {\r\n                        let callbackAction = () => {\r\n                            if(actions.length > 0) this.executeActionScript(actions.shift(), callbackAction, dialogue);\r\n                            else{\r\n                                if(dialogue.type === \"function\" && !this.canGoNext) this.playNextDialogue(0);\r\n                                this.canGoNext = true;\r\n                            }\r\n                        };\r\n                        this.executeActionScript(actions.shift(), callbackAction, dialogue);\r\n                    }\r\n                }\r\n\r\n                if(dialogue.type === \"function\" && this.canGoNext){\r\n                    this.playNextDialogue(0);\r\n                }\r\n\r\n                if(dialogue.tabs.includes(\"Dialogue\")){\r\n                    let character = getVariableValue(dialogue.speaker, this.assets);\r\n                    if(character === null || character === \"null\") character = dialogue.speakernull;\r\n                    this.hideText = dialogue.text.length === 0 && dialogue.type !== \"dialogue\";\r\n                    this.showText(dialogue.text, character);\r\n                }\r\n\r\n                if(dialogue.type === \"choices\"){\r\n                    this.inChoices = true;\r\n                    this.listChoice = [];\r\n                    this.listObjectChoice = [];\r\n                    this.currentChoicePage = 0;\r\n\r\n                    let i = 0;\r\n                    let ref = this;\r\n                    dialogue.choices.forEach((c) => {\r\n                        if(c.type === \"choice\"){\r\n                            let value = getVariableValue(c.condition, ref.assets);\r\n                            if(value === null || value === \"null\") value = false;\r\n                            if(value){\r\n                                ref.listChoice.push({ text : c.text, index : i});\r\n                            }\r\n                        } else if(c.type === \"object\"){\r\n                            let value = getVariableValue(c.object, ref.assets);\r\n                            if(!(value === null || value === \"null\")) {\r\n                                ref.listObjectChoice.push({ object : value, index : i});\r\n                            }\r\n                        }\r\n                        i++;\r\n                    });\r\n                }\r\n\r\n                if(dialogue.type === \"input\"){\r\n                    this.askinput = true;\r\n                    this.input = \"\";\r\n                    if(dialogue.input !== undefined){\r\n                        if(dialogue.input.type.name === \"String\"){\r\n                            this.inputtype = \"text\";\r\n                        }\r\n                        if(dialogue.input.type.name === \"Integer\"){\r\n                            this.inputtype = \"number\";\r\n                        }\r\n                        this.minInput = dialogue.minInput;\r\n                        this.maxInput = dialogue.maxInput;\r\n                    }\r\n                }\r\n\r\n                if(dialogue.type === \"condition\"){\r\n                    var value = getVariableValue(dialogue.condition, this.assets);\r\n                    if(value === null || value === \"null\") value = false;\r\n                    if(value){\r\n                        this.playNextDialogue(1);\r\n                    } else {\r\n                        this.playNextDialogue(0);\r\n                    }\r\n                }\r\n\r\n                if(dialogue.type === \"transition\"){\r\n                    if(dialogue.transitionpage !== undefined && dialogue.transitionpage !== \"\"){\r\n                        const arrival = getTransitionDialogue(dialogue.transitionpage, dialogue.id, this.assets);\r\n                        if(arrival !== null){\r\n                            this.page = dialogue.transitionpage;\r\n                            this.playDialogue(arrival.d, arrival.index);\r\n                        }\r\n                    }\r\n                    if(dialogue.nextDialogue.length>0 && this.canGoNext){\r\n                        this.playNextDialogue(0);\r\n                    }\r\n                }\r\n\r\n            },\r\n            playNextDialogue(index, fromchoice = false){\r\n                const dialogue = getDialogue(this.page, this.currentDialogueIndex, this.assets);\r\n                if(dialogue.nextDialogue[index] !== undefined && dialogue.nextDialogue[index].id !== -1){\r\n                    if(fromchoice){\r\n                        this.inChoices = false;\r\n                        this.showInventory = false;\r\n                    }\r\n                    this.playDialogue(getDialogue(this.page, dialogue.nextDialogue[index].id, this.assets), dialogue.nextDialogue[index].id);\r\n                }\r\n            },\r\n\r\n            // ######################### TEXT MANAGEMENT ###############################\r\n            showText(text, character){\r\n                this.currentText = \"\";\r\n                this.allText = text;\r\n                let regex = /\\${((\\w|\\s|d|\\[|\\])+)}/g;\r\n\r\n                const listMatch = [...text.matchAll(regex)];\r\n                listMatch.forEach((m) => {\r\n                    const text_var = m[1];\r\n                    let value = \"\";\r\n\r\n                    let regex_array = /((\\w|\\d|\\s)+)\\[((\\w|\\d\\s)+)\\]/g;\r\n                    const listMatchArray = [...text_var.matchAll(regex_array)];\r\n                    if(listMatchArray.length > 0 && listMatchArray[0].length > 1){\r\n                        const array = getVariableValueByName(listMatchArray[0][1], this.assets);\r\n                        if(array === null || array === undefined){\r\n                            this.errorAlert(\"Display Variable value in dialogue text\", \"002\", \"Can't access array variable value\");\r\n                            value = \"\";\r\n                        }\r\n                        else {\r\n                            let index = parseInt(listMatchArray[0][3]);\r\n                            if(isNaN(index)) index = getVariableValueByName(listMatchArray[0][3], this.assets);\r\n                            if(isNaN(index)) index = -1;\r\n                            value = getArrayElement(array, index, this.assets);\r\n                            if(value === null){\r\n                                this.errorAlert(\"Display Variable value in dialogue text\", \"002\", \"Can't access variable value from array at index \"+index);\r\n                                value = \"\";\r\n                            }\r\n                        }\r\n                    } else {\r\n                        value = getVariableValueByName(text_var, this.assets);\r\n                    }\r\n\r\n                    if(value === null){\r\n                        this.errorAlert(\"Display Variable value in dialogue text\", \"002\", \"Can't access variable {\"+text_var+\"} value\");\r\n                        value = \"\";\r\n                    }\r\n                    this.allText = this.allText.replace(m[0], value);\r\n                });\r\n\r\n                this.currentCharacter = character;\r\n                const charList = this.allText.split(\"\");\r\n\r\n                let sound = getVariableValue(this.assets[8].content.defaultTextSound, this.assets, \"Sound\");\r\n                if(sound === null) this.errorAlert(\"Reading Text Sound\", \"002\", \"Can't access variable value or the value is not the correct type of object\");\r\n                else if(sound !== \"null\"){\r\n                    let soundAsset = getSound(sound, this.assets);\r\n                    if(!this.errorHandlingReadingAsset(\"Global Issue\", \"Text Sound Playing\", 0, soundAsset, \"Sound\", sound)){\r\n                        this.textSoundID = this.playSound(soundAsset, sound, true);\r\n                    }\r\n                }\r\n\r\n\r\n\r\n                this.animationText = setInterval(() => {\r\n                    if(charList.length>0) this.currentText += charList.shift();\r\n                    else this.stopAnimationText();\r\n                    this.$refs.dialogueBlock.scrollTop = this.$refs.dialogueBlock.scrollHeight;\r\n                }, 10)\r\n            },\r\n            stopAnimationText(){\r\n                this.removeEndSound(this.textSoundID);\r\n                clearInterval(this.animationText);\r\n                this.animationText = null;\r\n                this.currentText = this.allText;\r\n                setTimeout(() => {\r\n                    this.$refs.dialogueBlock.scrollTop = this.$refs.dialogueBlock.scrollHeight;\r\n                }, (50))\r\n            },\r\n            clickText(){\r\n                let sound = getVariableValue(this.assets[8].content.defaultClickSound, this.assets);\r\n                if(sound === null) this.errorAlert(\"Reading Click Sound\", \"002\", \"Can't access variable value or the value is not the correct type of object\");\r\n                else if(sound !== \"null\"){\r\n                    let soundAsset = getSound(sound, this.assets);\r\n                    if(!this.errorHandlingReadingAsset(\"Global Issue\", \"Click Sound Playing\", 0, soundAsset, \"Sound\", sound)){\r\n                        this.playSound(soundAsset, sound);\r\n                    }\r\n                }\r\n                if(this.animationText === null) {\r\n                    if(this.canPassDialogue && this.canGoNext){\r\n                        this.playNextDialogue(0);\r\n                    }\r\n                } else {\r\n                    this.stopAnimationText();\r\n                }\r\n            },\r\n\r\n            // ######################### INPUT MANAGEMENT ##############################\r\n            submitInput() {\r\n                if(this.canSubmit){\r\n                    const dialogue = getDialogue(this.page, this.currentDialogueIndex, this.assets);\r\n                    let newvalue = this.input;\r\n                    if(this.inputtype === \"number\") newvalue = parseInt(newvalue);\r\n                    setValueVariableByName(dialogue.input.value.value, newvalue,  this.assets);\r\n                    this.askinput = false;\r\n                    this.playNextDialogue(0);\r\n                }\r\n            },\r\n\r\n            // #################### CHOICE & INVENTORY MANAGEMENT ######################\r\n            clickChoice(index){\r\n                this.playNextDialogue(this.currentChoicePage*8 + index, true);\r\n            },\r\n            getColumnChoice(index){\r\n                if(this.currentChoicePageList.length < 4){\r\n                    /*if(this.currentChoicePageList.length === 1) return '1 / 3';\r\n                    return index+1;*/\r\n                    return 1;\r\n                } else if(this.currentChoicePageList.length === 4){\r\n                    return index%2 + 1;\r\n                } else if(this.currentChoicePageList.length === 5){\r\n                    switch(index){\r\n                        case 0:\r\n                            return '1 / 3';\r\n                        case 1:\r\n                            return '3 / 5';\r\n                        case 2:\r\n                            return '5 / 7';\r\n                        case 3:\r\n                            return '2 / 4';\r\n                        case 4:\r\n                            return '4 / 6';\r\n                    }\r\n                }else if(this.currentChoicePageList.length === 6){\r\n                    return index%3 + 1;\r\n                } else if(this.currentChoicePageList.length === 7){\r\n                    switch(index){\r\n                        case 0:\r\n                            return '1 / 3';\r\n                        case 1:\r\n                            return '3 / 5';\r\n                        case 2:\r\n                            return '5 / 7';\r\n                        case 3:\r\n                            return '7 / 9';\r\n                        case 4:\r\n                            return '2 / 4';\r\n                        case 5:\r\n                            return '4 / 6';\r\n                        case 6:\r\n                            return '6 / 8';\r\n                    }\r\n                }else if(this.currentChoicePageList.length === 8){\r\n                    return index%4 + 1;\r\n                }\r\n            },\r\n            getRowChoice(index){\r\n                if(this.currentChoicePageList.length < 4){\r\n                    return index+1;\r\n                } else if(this.currentChoicePageList.length === 4){\r\n                    if(index<=1) return 1;\r\n                    return 2;\r\n                } else if(this.currentChoicePageList.length === 5){\r\n                    if(index<=2) return 1;\r\n                    return 2;\r\n                }else if(this.currentChoicePageList.length === 6){\r\n                    if(index<=2) return 1;\r\n                    return 2;\r\n                }else if(this.currentChoicePageList.length <=8 ){\r\n                    if(index<=3) return 1;\r\n                    return 2;\r\n                }\r\n            },\r\n            nextPageChoice(){\r\n                if(!(this.disableNextPageChoiceButtons)){\r\n                    this.currentChoicePage++;\r\n                }\r\n            },\r\n            backPageChoice(){\r\n                if(!(this.disableBackPageChoiceButtons)){\r\n                    this.currentChoicePage--;\r\n                }\r\n            },\r\n            showInventoryPanel(){\r\n                this.showInventory = true;\r\n            },\r\n            clickiteminventory(index){\r\n                const list = this.listObjectChoice.filter((o) => o.object === this.inventory[index].name);\r\n                if(list.length > 0) {\r\n                    this.playNextDialogue(list[0].index, true);\r\n                } else this.errorAlert(\"Click Inventory Item\", \"015\", \"You tried to use an item which is not usable in this choice\");\r\n            },\r\n            amountItemInventoryText(item){\r\n                return  (item.amount > 1 ? 'x'+item.amount : '');\r\n            },\r\n\r\n            // ################### CHARACTER MANGAMENT ###################################\r\n            resetCharactersLocation(){\r\n                if(this.listCharactersInScene.length === 1){\r\n                    this.listCharactersInScene[0].gridColumn = 2;\r\n                } else if(this.listCharactersInScene.length === 2){\r\n                    this.listCharactersInScene[0].gridColumn = 1;\r\n                    this.listCharactersInScene[1].gridColumn = 2;\r\n                } else {\r\n                    for(let i = 0; i<this.listCharactersInScene.length; i++){\r\n                        this.listCharactersInScene[i].gridColumn = i+1;\r\n                    }\r\n                }\r\n            },\r\n\r\n            // ################### SOUND MANAGEMENT ######################################\r\n            removeEndSound(id){\r\n                const index = this.listSounds.findIndex((s) => s.id === id);\r\n                if(index !== -1){\r\n                    this.listSounds[index].howl.stop();\r\n                    this.listSounds[index].howl = null;\r\n                    this.listSounds.splice(index, 1);\r\n                }\r\n            },\r\n            playSound(asset, name, loop = false){\r\n                const ref = this;\r\n                const id = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\r\n                this.listSounds.push({\r\n                    name : name,\r\n                    volume : asset.volume,\r\n                    id :id,\r\n                    howl : new Howl({\r\n                        src: [\"Assets/Sounds/\"+asset.path],\r\n                        autoplay: true,\r\n                        loop: loop,\r\n                        volume: asset.volume/100,\r\n                        onend: function() {\r\n                            if(!loop)ref.removeEndSound(id);\r\n                        }\r\n                    })\r\n                });\r\n                return id;\r\n            },\r\n\r\n            // ################### SCRIPT MANAGEMENT ######################################\r\n            executeActionScript(action, callback, dialogue){\r\n                let execCallback = true;\r\n                if(action.code !== undefined && action.code !== \"\"){\r\n                    this[action.name](action.inputs);\r\n                }\r\n                if(action.enable !== undefined && !action.enable){\r\n                    if(execCallback) callback();\r\n                    return;\r\n                }\r\n                switch(action.name){\r\n                    case \"Change Background\":\r\n                        let scene = getVariableValue(action.inputs[0], this.assets);\r\n                        if(this.errorHandlingReadingVariable(dialogue.title, action.name, 0, scene, true, \"Background\")) break;\r\n                        let sceneObject = getScene(scene, this.assets);\r\n                        if(this.errorHandlingReadingAsset(dialogue.title, action.name, 0, sceneObject, \"Background\")) break;\r\n                        document.body.style.backgroundImage = \"url('Assets/Scenes/\"+ sceneObject.img +\"')\";\r\n                        break;\r\n                    case \"Give Object\":\r\n                        let object = getVariableValue(action.inputs[0], this.assets);\r\n                        if(this.errorHandlingReadingVariable(dialogue.title, action.name, 0, object, true, \"Object\")) break;\r\n                        let amount = getVariableValue(action.inputs[1], this.assets);\r\n                        if(this.errorHandlingReadingVariable(dialogue.title, action.name, 1, amount, false, \"Integer\")) break;\r\n                        if(amount === 0) { this.alertError(dialogue.title, action.name, \"005\", \"the amount is set to 0\", 1); break;}\r\n                        let objectAsset = getObject(object, this.assets);\r\n                        if(this.errorHandlingReadingAsset(dialogue.title, action.name, 0, objectAsset, \"Object\")) break;\r\n                        let sameItemInventory = this.inventory.filter((i) => i.name === object);\r\n                        if(sameItemInventory.length>0){\r\n                            sameItemInventory[0].amount += amount;\r\n                        } else {\r\n                            this.inventory.push({name : object, amount : amount, img: objectAsset.img});\r\n                        }\r\n                        break;\r\n                    case \"Remove Object\":\r\n                        let objectToRemove = getVariableValue(action.inputs[0], this.assets);\r\n                        if(this.errorHandlingReadingVariable(dialogue.title, action.name, 0, objectToRemove, true, \"Object\")) break;\r\n                        let amountToRemove = getVariableValue(action.inputs[1], this.assets);\r\n                        if(this.errorHandlingReadingVariable(dialogue.title, action.name, 1, amountToRemove, false, \"Integer\")) break;\r\n                        if(amountToRemove === 0) { this.alertError(dialogue.title, action.name, \"005\", \"the amount is set to 0\", 1); break;}\r\n                        let index = this.inventory.findIndex((i) => i.name === objectToRemove);\r\n                        if(index !== -1){\r\n                            this.inventory[index].amount -= amountToRemove;\r\n                            if(this.inventory[index].amount <= 0){\r\n                                this.inventory.splice(index, 1);\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"If\":\r\n                        let condition = getVariableValue(action.inputs[0], this.assets, \"Boolean\");\r\n                        if(this.errorHandlingReadingVariable(dialogue.title, action.name, 0, condition, false, \"Boolean\")) break;\r\n                        if(action.action === undefined) { this.alertError(dialogue.title, action.name, \"006\", \"Invalid {if} function, corrupted function\", 0); break;}\r\n                        if(!condition) break;\r\n\r\n                        let actions = JSON.parse(JSON.stringify(action.action));\r\n                        if(actions.length>0){\r\n                            execCallback = false;\r\n                            let callbackAction = () => {\r\n                                if(actions.length > 0) this.executeActionScript(actions.shift(), callbackAction, dialogue);\r\n                                else callback();\r\n                            };\r\n                            this.executeActionScript(actions.shift(), callbackAction, dialogue);\r\n                        }\r\n                        break;\r\n                    case \"If Else\":\r\n                        let conditionIf = getVariableValue(action.inputs[0], this.assets, \"Boolean\");\r\n                        if(this.errorHandlingReadingVariable(dialogue.title, action.name, 0, conditionIf, false, \"Boolean\")) break;\r\n\r\n                        let actionsIfElse = [];\r\n                        let callbackActionIfElse = () => {\r\n                            if(actionsIfElse.length > 0) this.executeActionScript(actionsIfElse.shift(), callbackActionIfElse, dialogue);\r\n                            else callback();\r\n                        };\r\n\r\n                        if(conditionIf){\r\n                            if(action.actionif === undefined) { this.alertError(dialogue.title, action.name, \"006\", \"Invalid {ifElse} function, corrupted function\", 0); break; }\r\n                            actionsIfElse = JSON.parse(JSON.stringify(action.actionif));\r\n                        } else {\r\n                            if(action.actionelse === undefined) { this.alertError(dialogue.title, action.name, \"006\", \"Invalid {ifElse} function, corrupted function\", 0); break; }\r\n                            actionsIfElse = JSON.parse(JSON.stringify(action.actionelse));\r\n                        }\r\n                        if(actionsIfElse.length>0){\r\n                            execCallback = false;\r\n                            this.executeActionScript(actionsIfElse.shift(), callbackActionIfElse, dialogue);\r\n                        }\r\n                        break;\r\n                    case \"Delay\":\r\n                        let delay = getVariableValue(action.inputs[0], this.assets);\r\n                        if(this.errorHandlingReadingVariable(dialogue.title, action.name, 0, delay, false, \"Float\")) break;\r\n                        if(delay <= 0.0) { this.alertError(dialogue.title, action.name, \"007\", \"The delay is <= 0\", 0); break; }\r\n                        execCallback = false;\r\n                        setTimeout(() => {callback();}, delay*1000);\r\n                        break;\r\n                    case \"Set\":\r\n                        let variable = getVariableValue(action.inputs[0], this.assets);\r\n                        if(this.errorHandlingReadingVariable(dialogue.title, action.name, 0, variable, false, \"\")) break;\r\n                        let variableValue = getVariableObjectByName(variable, this.assets);\r\n                        if(variableValue === \"null\" || variableValue === null) { this.alertError(dialogue.title, action.name, \"008\", \"Can't access variable with name : \"+variable, 0); break; }\r\n                        if(variableValue.type === undefined || variableValue.type.name === undefined) { this.alertError(dialogue.title, action.name, \"009\", \"Accessing variable {\"+variable+\"} with corrupted structure\", 0); break; }\r\n                        let value = getVariableValue(action.inputs[1], this.assets, variableValue.type.name);\r\n                        if(value === null) {\r\n                            if(variableValue.type.defaultValue !== undefined){\r\n                                value = variableValue.type.defaultValue;\r\n                            }\r\n                        }\r\n                        if(value === null) { this.alertError(dialogue.title, action.name, \"002\", \"can't access variable input value\", 0); break;}\r\n                        setValueVariableByName(variable, value, this.assets);\r\n                        break;\r\n                    case \"Add Character\":\r\n                        let character = getVariableValue(action.inputs[0], this.assets);\r\n                        if(this.errorHandlingReadingVariable(dialogue.title, action.name, 0, character, true, \"Character\")) break;\r\n                        let characterAsset = getCharacter(character, this.assets);\r\n                        if(this.errorHandlingReadingAsset(dialogue.title, action.name, 0, characterAsset, \"Character\")) break;\r\n                        if(this.listCharactersInScene.filter((c) => c.name === characterAsset.name).length === 0){\r\n                            this.listCharactersInScene.push({name : characterAsset.name, size : characterAsset.size, img : characterAsset.img, gridColumn:{}});\r\n                            this.resetCharactersLocation();\r\n                        }\r\n                        break;\r\n                    case \"Set Character State\":\r\n                        let characterS = getVariableValue(action.inputs[0], this.assets);\r\n                        if(this.errorHandlingReadingVariable(dialogue.title, action.name, 0, characterS, true, \"Character\")) break;\r\n                        let charList = this.listCharactersInScene.filter((c) => c.name === characterS);\r\n                        if(charList.length===0) { this.alertError(dialogue.title, action.name, \"010\", \"Can't change state of character {\"+characterS+\"}, the character is not in the scene\", 0); break; }\r\n                        let characterAssetS = getCharacter(characterS, this.assets);\r\n                        if(this.errorHandlingReadingAsset(dialogue.title, action.name, 0, characterAssetS, \"Character\")) break;\r\n                        let nameState = getVariableValue(action.inputs[1], this.assets);\r\n                        if(this.errorHandlingReadingVariable(dialogue.title, action.name, 1, nameState, false, \"String\")) break;\r\n                        if(nameState === \"\") { this.alertError(dialogue.title, action.name, \"011\", \"Can't change state of character {\"+characterS+\"}, the state name is not specified\", 1); break; }\r\n                        let listState = characterAssetS.imgOthers.filter((i) => i.name === nameState);\r\n                        if(listState.length>0){\r\n                            charList[0].img = listState[0].img;\r\n                        } else this.alertError(dialogue.title, action.name, \"012\", \"The state {\"+nameState+\"} of character {\"+characterS+\"} is unknown\", 1);\r\n                        break;\r\n                    case \"Remove Character\":\r\n                        let characterTR = getVariableValue(action.inputs[0], this.assets);\r\n                        if(this.errorHandlingReadingVariable(dialogue.title, action.name, 0, characterTR, true, \"Character\")) break;\r\n                        let characterAssetTR = getCharacter(characterTR, this.assets);\r\n                        if(this.errorHandlingReadingAsset(dialogue.title, action.name, 0, characterAssetTR, \"Character\")) break;\r\n                        const indexTR = this.listCharactersInScene.findIndex((c) => c.name === characterAssetTR.name);\r\n                        if(indexTR !== -1){\r\n                            this.listCharactersInScene.splice(indexTR, 1);\r\n                            this.resetCharactersLocation();\r\n                        } else this.alertError(dialogue.title, action.name, \"013\", \"Can't remove the character {\"+characterTR+\"} from the scene because the character is not currently in the scene\", 0);\r\n                        break;\r\n                    case \"Play Music\":\r\n                        let music = getVariableValue(action.inputs[0], this.assets);\r\n                        if(this.errorHandlingReadingVariable(dialogue.title, action.name, 0, music, true, \"Music\")) break;\r\n                        let musicAsset = getMusic(music, this.assets);\r\n                        if(this.errorHandlingReadingAsset(dialogue.title, action.name, 0, musicAsset, \"Music\")) break;\r\n                        const indexM = this.listMusics.findIndex((m) => m.name === music);\r\n                        if(indexM === -1){\r\n                            this.listMusics.push(\r\n                                {\r\n                                    name : music,\r\n                                    volume : musicAsset.volume,\r\n                                    howl : new Howl({\r\n                                        src: [\"Assets/Musics/\"+musicAsset.path],\r\n                                        autoplay: true,\r\n                                        loop: true,\r\n                                        volume: musicAsset.volume/100})\r\n                                });\r\n                        } else {\r\n                            this.listMusics[indexM].howl.stop();\r\n                            this.listMusics[indexM].howl.play();\r\n                        }\r\n                        break;\r\n                    case \"Stop Music\":\r\n                        let musicTR = getVariableValue(action.inputs[0], this.assets);\r\n                        if(this.errorHandlingReadingVariable(dialogue.title, action.name, 0, music, true, \"Music\")) break;\r\n                        const indexMTR = this.listMusics.findIndex((m) => m.name === musicTR);\r\n                        if(indexMTR !== -1){\r\n                            this.listMusics[indexMTR].howl.stop();\r\n                            this.listMusics[indexMTR].howl = null;\r\n                            this.listMusics.splice(indexMTR, 1);\r\n                        } this.alertError(dialogue.title, action.name, \"014\", \"Can't stop the music {\"+musicTR+\"} because it is not currently played\", 0);\r\n                        break;\r\n                    case \"Play Sound\":\r\n                        let sound = getVariableValue(action.inputs[0], this.assets);\r\n                        if(this.errorHandlingReadingVariable(dialogue.title, action.name, 0, sound, true, \"Sound\")) break;\r\n                        let soundAsset = getSound(sound, this.assets);\r\n                        if(this.errorHandlingReadingAsset(dialogue.title, action.name, 0, soundAsset, \"Sound\")) break;\r\n                        this.playSound(soundAsset, sound);\r\n                        break;\r\n                    case \"Stop Sound\":\r\n                        let soundTR = getVariableValue(action.inputs[0], this.assets);\r\n                        if(this.errorHandlingReadingVariable(dialogue.title, action.name, 0, soundTR, true, \"Sound\")) break;\r\n                        this.listSounds.filter((s) => s.name === soundTR).forEach((s) => {\r\n                            s.howl.stop();\r\n                            s.howl = null;\r\n                        });\r\n                        this.listSounds = this.listSounds.filter((s) => s.name !== soundTR);\r\n                        break;\r\n                    case \"Toggle Debug mode\":\r\n                        if(packaged !== undefined && packaged) break;\r\n                        let enbabled = getVariableValue(action.inputs[0], this.assets, \"Boolean\");\r\n                        if(this.errorHandlingReadingVariable(dialogue.title, action.name, 0, enbabled, false, \"Boolean\")) break;\r\n                        this.debugMode = enbabled;\r\n                        break;\r\n                    case \"Alert\":\r\n                        let text = getVariableValue(action.inputs[0], this.assets);\r\n                        if(text === null) { this.alertError(dialogue.title, action.name, \"002\", \"can't access variable value or the value is not the correct type of object\", 0); break;}\r\n                        this.alertText(text);\r\n                        break;\r\n                    case \"Array Push\":\r\n                        let array = getVariableValue(action.inputs[0], this.assets, \"Array\");\r\n                        if(this.errorHandlingReadingVariable(dialogue.title, action.name, 0, array, false, \"Array\")) break;\r\n                        if(array.type === undefined || array.values === undefined) { this.alertError(dialogue.title, action.name, \"002\", \"can't access variable value or the value is not the correct type of object\", 0); break;}\r\n                        \r\n                        let object_to_push = getVariableValue(action.inputs[2], this.assets, array.type.name);\r\n                        if(this.errorHandlingReadingVariable(dialogue.title, action.name, 2, object_to_push, false, array.type.name)) break;\r\n                        if(action.inputs[2].type.name !== array.type.name) { this.alertError(dialogue.title, action.name, \"002\", \"can't access variable value or the value is not the correct type of object\", 2); break;}\r\n                        \r\n                        array.values.push({type : action.inputs[2].type, value : {type : \"value\", value : object_to_push}});\r\n                        break;\r\n                    case \"Array Set Index\":\r\n                        let arraySI = getVariableValue(action.inputs[0], this.assets, \"Array\");\r\n                        if(this.errorHandlingReadingVariable(dialogue.title, action.name, 0, arraySI, false, \"Array\")) break;\r\n                        if(arraySI.type === undefined || arraySI.values === undefined) { this.alertError(dialogue.title, action.name, \"002\", \"can't access variable value or the value is not the correct type of object\", 0); break;}\r\n                        \r\n                        let indexSI = getVariableValue(action.inputs[1], this.assets, \"Integer\");\r\n                        if(this.errorHandlingReadingVariable(dialogue.title, action.name, 1, indexSI, false, \"Integer\")) break;\r\n                        if(indexSI < 0 || indexSI >= arraySI.values.length) { this.alertError(dialogue.title, action.name, \"016\", \"Invalid index for array of size \"+arraySI.values.length, 3); break;}\r\n                        \r\n                        let object_to_set = getVariableValue(action.inputs[3], this.assets, arraySI.type.name);\r\n                        if(this.errorHandlingReadingVariable(dialogue.title, action.name, 3, object_to_set, false, arraySI.type.name)) break;\r\n                        if(action.inputs[3].type.name !== arraySI.type.name) { this.alertError(dialogue.title, action.name, \"002\", \"can't access variable value or the value is not the correct type of object\", 3); break;}\r\n                        \r\n                        arraySI.values[indexSI] = {type : action.inputs[3].type, value : {type : \"value\", value : object_to_set}};\r\n                        break;\r\n                    case \"Array Remove Index\":\r\n                        let arrayRI = getVariableValue(action.inputs[0], this.assets, \"Array\");\r\n                        if(this.errorHandlingReadingVariable(dialogue.title, action.name, 0, arrayRI, false, \"Array\")) break;\r\n                        if(arrayRI.type === undefined || arrayRI.values === undefined) { this.alertError(dialogue.title, action.name, \"002\", \"can't access variable value or the value is not the correct type of object\", 0); break;}\r\n                        \r\n                        let indexRI = getVariableValue(action.inputs[1], this.assets, \"Integer\");\r\n                        if(this.errorHandlingReadingVariable(dialogue.title, action.name, 1, indexRI, false, \"Integer\")) break;\r\n                        if(indexRI < 0 || indexRI >= arrayRI.values.length) { this.alertError(dialogue.title, action.name, \"016\", \"Invalid index for array of size \"+arrayRI.values.length, 3); break;}\r\n\r\n                        arrayRI.values.splice(indexRI, 1);\r\n\r\n                        break;\r\n                }\r\n                if(execCallback) callback();\r\n            },\r\n\r\n            // ################### CUSTOM FUNCTION UTILS ##################################\r\n            getInputValue(input){\r\n                return getVariableValue(input, this.assets);\r\n            },\r\n\r\n            //#################### DEBUG ###################################################\r\n            alertError(dialogue, func, error, text, input = \"\"){\r\n                if(this.debugMode){\r\n                    let texta = \"\";\r\n                    if(dialogue !== \"\") texta += \"[\" +dialogue+ \"]\";\r\n                    if(func !== \"\") texta += \"[\" +func+ \"]\";\r\n                    if(input !== \"\") texta += \"[\" +input+ \"]\";\r\n                    texta += \" Error #\"+error+(text !== \"\" ? \" : \"+text : \"\");\r\n                    alert(texta);\r\n                }\r\n            },\r\n            alertText(text){\r\n                if(this.debugMode) alert(text);\r\n            },\r\n            errorAlert(func, error, text){\r\n                const dialogue = getDialogue(this.page, this.currentDialogueIndex, this.assets);\r\n                if(dialogue !== null && dialogue.title !== undefined) this.alertError(dialogue.title, func, error, text);\r\n            },\r\n            errorHandlingReadingVariable(dialogue, func, input, variableValue, isAssetVar, varType){\r\n                if(variableValue === \"null\") {\r\n                    if(isAssetVar) this.alertError(dialogue, func, \"001\", varType+\" asset input is set to null\", input);\r\n                    else this.alertError(dialogue, func, \"004\", varType+\" variable input return a null value\", input);\r\n                    return true;\r\n                }\r\n                if(variableValue === null) {\r\n                    this.alertError(dialogue, func, \"002\", \"can't access variable value or the value is not the correct type of object\", input);\r\n                    return true;\r\n                }\r\n                return false;\r\n            },\r\n            errorHandlingReadingAsset(dialogue, func, input, assetValue, assetType, name=\"\"){\r\n                if(assetValue === null) {\r\n                    this.alertError(dialogue, func, \"003\", \"can't find \"+assetType+\" asset\"+(name !== \"\" ? \" {\"+name+\"}\" : \"\"), input);\r\n                    return true;\r\n                }\r\n                return false;\r\n            }\r\n        }\r\n    });\r\n\r\n    app.mount(\"#app\");\r\n\r\n</script>"
      },
      {
        "title" : "styleEngine.css",
        "language" : "css",
        "icon" : "mdi-language-css3",
        "uneditable" : true,
        "value" : "/* ###################### UTILITIES ###################### */\r\n\r\n.unselectable {\r\n    -webkit-touch-callout: none;\r\n    -webkit-user-select: none;\r\n    -khtml-user-select: none;\r\n    -moz-user-select: none;\r\n    -ms-user-select: none;\r\n    user-select: none;\r\n}\r\n\r\n.show {\r\n    opacity: 1!important;\r\n    pointer-events: visible!important;\r\n}\r\n\r\n.buttonClass{\r\n    background-image: linear-gradient(to right, #485563 0%, #29323c  51%, #485563  100%);\r\n    border-radius: 10px;\r\n    padding: 8px 8px;\r\n    text-decoration: none;\r\n    font-size: 18px;\r\n    transition: background-position .6s ease, opacity 0.2s;\r\n    overflow: hidden;\r\n    text-align: center;\r\n    background-size: 200% auto;\r\n    color: white;\r\n}\r\n\r\n.buttonClass:hover{\r\n    background-position: right center;\r\n    cursor: pointer;\r\n}\r\n\r\n/* ####################################################### */\r\n/* ###################### BODY ###################### */\r\n\r\nbody{\r\n    background-repeat: no-repeat;\r\n    background-size: 100vw 100vh;\r\n    background-position: top;\r\n    background-color: #000000;\r\n    -webkit-transition: background-image 0.2s ease;\r\n    transition: background-image 0.2s ease;\r\n    /*overflow: hidden;*/\r\n    padding: 0px;\r\n    margin: 0px;\r\n}\r\n\r\n/* ####################################################### */\r\n/* ################### DIALOGUE BLOCK #################### */\r\n\r\n#dialogue-module {\r\n    position: fixed;\r\n    bottom:0;\r\n    width: calc(100% - 20px * 2);\r\n    padding: 0 20px 20px 20px;\r\n    opacity: 1;\r\n    transition: transform 0.6s, opacity 0.3s;\r\n}\r\n\r\n#dialogue-block{\r\n    background-image: linear-gradient(to right, rgba(72,85,99,0.7) 0%, rgba(41,50,60,0.7)  51%, rgba(72,85,99,0.7)  100%);\r\n    width: 100%;\r\n    border-radius: 25px;\r\n    height: 20vh;\r\n    border: thick double #c7c7c7;\r\n    filter: drop-shadow(2px 4px 6px rgba(0, 0, 0, .6));\r\n    padding-bottom: 10px;\r\n    padding-top: 15px;\r\n\r\n    overflow-y: scroll;\r\n    -ms-overflow-style: none;  /* IE and Edge */\r\n    scrollbar-width: none;\r\n}\r\n\r\n#dialogue-block::-webkit-scrollbar {\r\n    display: none;\r\n}\r\n\r\n#speaker-block{\r\n    background-image: linear-gradient(to right, rgba(72,85,99,0.7) 0%, rgba(41,50,60,0.7)  51%, rgba(72,85,99,0.7)  100%);\r\n    width: 18%;\r\n    border-radius: 15px 15px 0 0;\r\n    border: thick double #c7c7c7;\r\n    filter: drop-shadow(2px 4px 6px rgba(0, 0, 0, .6));\r\n    padding: 10px 0 10px 0;\r\n    margin-bottom: 5px;\r\n    text-align: center;\r\n    margin-left: 2%;\r\n}\r\n\r\n.up{\r\n    transform: translateY(calc(-1vh - 20vh));\r\n}\r\n\r\n.hide{\r\n    opacity: 0!important;\r\n    pointer-events: none!important;\r\n}\r\n\r\n#character-speaker{\r\n    color: #4995a8;\r\n    font-size:2em;\r\n    margin:0;\r\n}\r\n\r\n#dialogue-text {\r\n    margin: 0 20px 0 20px;\r\n    color: white;\r\n    text-align: justify;\r\n    font-size:1.7em;\r\n}\r\n\r\n@media only screen and (max-width: 1400px) {\r\n    #speaker-block{\r\n        width: 25%;\r\n    }\r\n\r\n    #character-speaker{\r\n        font-size:1.7em;\r\n    }\r\n}\r\n\r\n@media only screen and (max-width: 800px) {\r\n    #speaker-block{\r\n        width: 35%;\r\n    }\r\n\r\n    #character-speaker{\r\n        font-size:1.5em;\r\n    }\r\n\r\n    #dialogue-text{\r\n        font-size:1.4em;\r\n    }\r\n}\r\n\r\n/* ####################################################### */\r\n/* ################### CHOICE BLOCK ###################### */\r\n\r\n#choice-module {\r\n    position: fixed;\r\n    bottom:0;\r\n    width: calc(100% - 20px * 2);\r\n    padding: 0 20px 20px 20px;\r\n    text-align: center;\r\n}\r\n\r\n#choice-block{\r\n    opacity: 0;\r\n    width: 75%;\r\n    border-radius: 25px;\r\n    height: 20vh;\r\n    transition: all 0.4s;\r\n    display: inline-block;\r\n    align-items: center;\r\n}\r\n\r\n#choicesLoc{\r\n    display: grid;\r\n    grid-gap: 10px;\r\n    margin: 5px 2%;\r\n    width: 100%;\r\n}\r\n\r\n#choice-row{\r\n    display: flex;\r\n    flex-direction: row;\r\n    height: 100%;\r\n}\r\n\r\n#grid2choices{\r\n    grid-template-columns: repeat(1, 1fr);\r\n    grid-template-rows: repeat(2, 1fr);\r\n}\r\n\r\n#grid3choices{\r\n    grid-template-columns: repeat(1, 1fr);\r\n    grid-template-rows: repeat(3, 1fr);\r\n}\r\n\r\n#grid4choices{\r\n    grid-template-columns: repeat(2, 1fr);\r\n    grid-template-rows: repeat(2, 1fr);\r\n}\r\n\r\n#grid5choices{\r\n    grid-template-columns: repeat(6, 1fr);\r\n    grid-template-rows: repeat(2, 1fr);\r\n}\r\n\r\n#grid6choices{\r\n    grid-template-columns: repeat(3, 1fr);\r\n    grid-template-rows: repeat(2, 1fr);\r\n}\r\n\r\n#grid7choices{\r\n    grid-template-columns: repeat(8, 1fr);\r\n    grid-template-rows: repeat(2, 1fr);\r\n}\r\n\r\n#grid8choices{\r\n    grid-template-columns: repeat(4, 1fr);\r\n    grid-template-rows: repeat(2, 1fr);\r\n}\r\n\r\n.pageButton{\r\n    grid-row: 1;\r\n    height: 60px;\r\n    margin-top: 7vh;\r\n    padding: 0 20px 0 20px;\r\n}\r\n\r\n@media only screen and (max-width: 1100px) {\r\n    #choice-block{\r\n        width: 100%;\r\n    }\r\n}\r\n\r\n\r\n/* ####################################################### */\r\n/* ##################### INPUT BLOCK ##################### */\r\n\r\n#input-module{\r\n    position: fixed;\r\n    bottom:0;\r\n    width: calc(100% - 20px * 2);\r\n    padding: 0 20px 20px 20px;\r\n    transform: translateY(calc(-5vh - 20vh));\r\n    display: grid;\r\n    grid-template-columns: repeat(3, 1fr);\r\n    opacity: 0;\r\n    transition: all 0.8s;\r\n}\r\n\r\n#inputLoc{\r\n    grid-column: 2;\r\n    grid-row: 1;\r\n    display: grid;\r\n    grid-template-columns: repeat(4, 1fr);\r\n    grid-gap: 10px;\r\n    width: 100%;\r\n}\r\n\r\n#inputButton{\r\n    grid-column: 4;\r\n    grid-row: 1;\r\n    padding: 15px 0 15px 0;\r\n}\r\n\r\n#inputText {\r\n    grid-column: 1/4;\r\n    grid-row: 1;\r\n    width: 100%;\r\n    padding: 6px 10px;\r\n    box-sizing: border-box;\r\n    outline: none;\r\n    font-size: 1.3em;\r\n}\r\n\r\n.invalidtext {\r\n    color: #b82e2e!important;\r\n}\r\n\r\n/* ####################################################### */\r\n/* ###################### INVENTORY ###################### */\r\n\r\n#inventory-module{\r\n    background: rgba(84, 97, 129, 0.7);\r\n    width: 90%;\r\n    height: 90vh;\r\n    position: fixed;\r\n    left: 50%;\r\n    top: 50%;\r\n    transform: translate(-50%, -50%);\r\n    transition: transform 1s, opcaity 0.15s, all 1s;\r\n    opacity: 1;\r\n    pointer-events: visible;\r\n    text-align: center;\r\n    border-radius: 25px;\r\n    border: solid #464646;\r\n}\r\n\r\n#inventory-module h1{\r\n    filter: drop-shadow(2px 4px 6px rgba(0, 0, 0, .6));\r\n    color: #4995a8;\r\n}\r\n\r\n#inventory-background-overlay{\r\n    background: rgba(0,0,0,0.2);\r\n    width: 100%;\r\n    height: 100vh;\r\n    position: fixed;\r\n    left: 50%;\r\n    top: 50%;\r\n    transform: translate(-50%, -50%);\r\n    opacity: 0;\r\n    transition: opcaity 0.3s;\r\n    pointer-events: none;\r\n}\r\n\r\n.inventoryclosed{\r\n    top: -45%!important;\r\n    bottom: 50%!important;\r\n    right: 0!important;\r\n    opacity: 0!important;\r\n    margin-top: 15px!important;\r\n    transform: scale(0.01)!important ; translate(0, 0)!important;\r\n    pointer-events: none!important;\r\n}\r\n\r\n#inventoryButton {\r\n    position: fixed;\r\n    top: 0;\r\n    right: 0;\r\n    opacity: 0;\r\n    margin-top: 15px;\r\n    margin-right: 15px;\r\n    transition: all 0.5s;\r\n    pointer-events: none;\r\n    padding: 20px 25px;\r\n}\r\n\r\n#inventory-button-exit{\r\n    position: fixed;\r\n    bottom: 20px;\r\n    transform: translateX(-69px);\r\n    padding: 12px 25px 12px 25px;\r\n}\r\n\r\n#inventory-container{\r\n    background: rgba(58, 84, 93, 0.6);\r\n    padding: 10px;\r\n    height: calc(100% - 200px);\r\n    margin-left: 25px;\r\n    margin-right: 25px;\r\n    display: grid;\r\n    grid-gap: 10px;\r\n    grid-template-columns: repeat(10, 1fr);\r\n    grid-auto-rows: 25%;\r\n    overflow-y: auto;\r\n    border-radius: 10px;\r\n    border: solid #9d9d9d;\r\n}\r\n\r\n.item-button{\r\n    display: grid;\r\n    grid-template-rows: repeat(5, 1fr);\r\n    padding: 5px 5px 5px 5px!important;\r\n}\r\n\r\n.img-item{\r\n    width: 100%;\r\n    margin-top: 15%;\r\n    height: 90%;\r\n    grid-row: 1/5;\r\n    pointer-events: none;\r\n}\r\n\r\n.text-item{\r\n    grid-row: 5;\r\n    pointer-events: none;\r\n}\r\n\r\n@media only screen and (max-width: 1500px) {\r\n    #inventory-container{\r\n        grid-template-columns: repeat(8, 1fr);\r\n    }\r\n}\r\n\r\n@media only screen and (max-width: 1100px) {\r\n    #inventory-container{\r\n        grid-template-columns: repeat(6, 1fr);\r\n    }\r\n}\r\n\r\n@media only screen and (max-width: 900px) {\r\n    #inventory-container{\r\n        grid-template-columns: repeat(4, 1fr);\r\n    }\r\n}\r\n\r\n@media only screen and (max-width: 600px) {\r\n    #inventory-container{\r\n        grid-template-columns: repeat(3, 1fr);\r\n    }\r\n}\r\n\r\n@media only screen and (max-width: 400px) {\r\n    #inventory-container{\r\n        grid-template-columns: repeat(2, 1fr);\r\n    }\r\n}\r\n\r\n/* ####################################################### */\r\n/* ################### CHARACTER LIST #################### */\r\n\r\n#characters-module{\r\n    width: 100%;\r\n    height: 100%;\r\n    position: fixed;\r\n    bottom: 0;\r\n    display: grid;\r\n    justify-items: center;\r\n    margin: 0!important;\r\n}\r\n\r\n.character-div{\r\n    height: 100vh;\r\n    display: flex;\r\n    flex-direction: column;\r\n}\r\n\r\n.character-img{\r\n    margin-top: auto;\r\n    pointer-events: none;\r\n    width: auto;\r\n}\r\n\r\n/* ####################################################### */"
      },
      {
        "title" : "libEngine.js",
        "language" : "javascript",
        "icon" : "mdi-language-javascript",
        "uneditable" : true,
        "value" : "function getDialogue(page, index, assets){\r\n    var pageA = assets[6].content.filter((p) => p.title === page);\r\n    if(pageA.length === 0) return null;\r\n    return pageA[0].listDialogues[index];\r\n}\r\n\r\nfunction getTransitionDialogue(page, id, assets){\r\n    var pageA = assets[6].content.filter((p) => p.title === page);\r\n    if(pageA.length === 0) return null;\r\n    for(var i = 0; i<pageA[0].listDialogues.length; i++){\r\n        if(pageA[0].listDialogues[i].id === id) return {d : pageA[0].listDialogues[i], index : i};\r\n    }\r\n    return null;\r\n}\r\n\r\nfunction getCharacter(name, assets){\r\n    return getAssetIndex(0, name, assets);\r\n}\r\n\r\nfunction getScene(name, assets){\r\n    return getAssetIndex(1, name, assets);\r\n}\r\n\r\nfunction getObject(name, assets){\r\n    return getAssetIndex(2, name, assets);\r\n}\r\n\r\nfunction getMusic(name, assets){\r\n    return getAssetIndex(3, name, assets);\r\n}\r\n\r\nfunction getSound(name, assets){\r\n    return getAssetIndex(4, name, assets);\r\n}\r\n\r\nfunction setValueVariableByName(name, value, assets){\r\n    var varA = assets[5].content.filter((p) => p.name === name);\r\n    if(varA.length === 0) return null;\r\n    var variable = varA[0];\r\n    variable.value = {value : value, type : \"value\"};\r\n}\r\n\r\nfunction getVariableValueByName(name, assets){\r\n    var varA = assets[5].content.filter((p) => p.name === name);\r\n    if(varA.length === 0) return null;\r\n    var variable = varA[0];\r\n    return getVariableValue(variable, assets);\r\n}\r\n\r\nfunction getVariableObjectByName(name, assets){\r\n    var varA = assets[5].content.filter((p) => p.name === name);\r\n    if(varA.length === 0) return null;\r\n    var variable = varA[0];\r\n    return variable;\r\n}\r\n\r\nfunction getVariableValue(variable, assets, type = \"none\"){\r\n    if(variable.value.type === \"value\" || variable.type.name === \"Variable\"){\r\n        if(variable.type.name === \"Boolean\" && (variable.value.operation !== undefined && variable.value.operation !== \"value\")){\r\n            switch (variable.value.operation) {\r\n                case \"==\":\r\n                    return getVariableValue(variable.value.input1, assets) === getVariableValue(variable.value.input2, assets);\r\n                case \">\":\r\n                    return getVariableValue(variable.value.input1, assets) > getVariableValue(variable.value.input2, assets);\r\n                case \">=\":\r\n                    return getVariableValue(variable.value.input1, assets) >= getVariableValue(variable.value.input2, assets);\r\n                case \"<\":\r\n                    return getVariableValue(variable.value.input1, assets) < getVariableValue(variable.value.input2, assets);\r\n                case \"<=\":\r\n                    return getVariableValue(variable.value.input1, assets) <= getVariableValue(variable.value.input2, assets);\r\n            }\r\n            return false;\r\n        } else if((variable.type.name === \"Integer\" || variable.type.name === \"Float\") && (variable.value.operation !== undefined && variable.value.operation !== \"value\")){\r\n            let input1 = (variable.type.name === \"Integer\" ? Math.trunc(getVariableValue(variable.value.input1, assets)) : getVariableValue(variable.value.input1, assets));\r\n            let input2;\r\n            if(variable.value.operation !== \"array length\") input2 = (variable.type.name === \"Integer\" ? Math.trunc(getVariableValue(variable.value.input2, assets)) : getVariableValue(variable.value.input2, assets));\r\n            else input2 = getVariableValue(variable.value.input2, assets);\r\n            switch (variable.value.operation) {\r\n                case \"+\":\r\n                    return input1 + input2;\r\n                case \"-\":\r\n                    return input1 - input2;\r\n                case \"x\":\r\n                    return input1 * input2;\r\n                case \"÷\":\r\n                    return (variable.type.name === \"Integer\" ? Math.trunc(input1 / input2) : input1 / input2);\r\n                case \"Random\":\r\n                    let min = Math.min(input1, input2);\r\n                    let max = Math.max(input1, input2);\r\n                    return (variable.type.name === \"Integer\" ? Math.floor(Math.random() * (max - min) + min) : Math.random() * (max - min) + min);\r\n                case \"Min\" :\r\n                    return Math.min(input1, input2);\r\n                case \"Max\" :\r\n                    return Math.max(input1, input2);\r\n                case \"power\" :\r\n                    return Math.pow(input1, input2);\r\n                case \"exp\" :\r\n                    return (variable.type.name === \"Integer\" ? Math.floor(Math.exp(input2)) : Math.exp(input2));\r\n                case \"array length\" :\r\n                    if(input2 === null || input2 === undefined || input2.values === undefined) return 0;\r\n                    return input2.values.length;\r\n            }\r\n            return false;\r\n        } else if(variable.type.name === \"String\" && (variable.value.operation !== undefined && variable.value.operation !== \"value\")) {\r\n            switch (variable.value.operation) {\r\n                case \"Concat\":\r\n                    return getVariableValue(variable.value.input1, assets, \"String\") + getVariableValue(variable.value.input2, assets, \"String\");\r\n                case \"to String\":\r\n                    let input_var_string = getVariableValue(variable.value.input2, assets);\r\n                    console.log(input_var_string);\r\n                    if(input_var_string === null || input_var_string === undefined) return \"\";\r\n                    if(input_var_string.values !== undefined) return arrayToString(input_var_string.values, assets);\r\n                    return input_var_string + \"\";\r\n            }\r\n            return \"\";\r\n        }\r\n        return variable.value.value;\r\n    }\r\n    if(variable.value.type === \"variable\"){\r\n        if(variable.type.name === \"Integer\") return Math.trunc(getVariableValueByName(variable.value.value, assets));\r\n        return getVariableValueByName(variable.value.value, assets);\r\n    }\r\n    if(variable.value.type === \"arrayElement\"){\r\n        if(variable.value.value.index === undefined || variable.value.value.array === undefined) return null;\r\n        let index = getVariableValue(variable.value.value.index, assets);\r\n        let array = getVariableValue(variable.value.value.array, assets);\r\n        if(isNaN(index)) return null;\r\n        if(type === \"none\") return getArrayElement(array, index, assets);\r\n        let arrayElement = getArrayElement(array, index, assets, true);\r\n        if(arrayElement === null) return null;\r\n        let value = getVariableValue(arrayElement, assets);\r\n        if(arrayElement.type.name !== type){\r\n            if((arrayElement.type.name === \"Integer\" || arrayElement.type.name === \"Float\") && (type === \"Integer\" || type === \"Float\") && value !== null){\r\n                if(type === \"Integer\") return Math.trunc(value);\r\n                return value;\r\n            }\r\n            return null;\r\n        } else {\r\n            return value;\r\n        }\r\n    }\r\n}\r\n\r\nfunction arrayToString(array, assets){\r\n    let text = \"[\";\r\n    for(var i = 0; i < array.length; i++){\r\n        let current_var = getVariableValue(array[i], assets);\r\n        if(current_var === null || current_var === undefined) text = text + \"null\";\r\n        else if(current_var.values !== undefined) text = text + arrayToString(current_var.values, assets);\r\n        else text += current_var;\r\n        if(i < array.length - 1) text += \", \";\r\n    } \r\n    return text + \"]\";\r\n}\r\n\r\nfunction getArrayElement(array, index, assets, getObj = false){\r\n    if(array.values !== undefined && array.values.length > 0 && array.values.length > index && index >= 0){\r\n        let int_index = Math.trunc(index);\r\n        if(!getObj) return getVariableValue(array.values[int_index], assets);\r\n        else return array.values[int_index];\r\n    } else {return null}\r\n}\r\n\r\nfunction getAssetIndex(index, name, assets){\r\n    var asset = assets[index].content.filter((c) => c.name === name);\r\n    if(asset.length === 0) return null;\r\n    return asset[0];\r\n}"
      }
    ]
  },
  {
    "type" : "Properties",
    "content" : {}
  },
  {
    "type" : "Custom Functions",
    "content" : []
  }
]